{"version":3,"file":"ae70068eaae2d1fe16843a8442144885b6dcee9d-ea94e78cc9a01033c67d.js","mappings":"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","sources":["webpack://www/./node_modules/fp-ts/es6/ReadonlyArray.js","webpack://www/./node_modules/fp-ts/es6/Array.js","webpack://www/./node_modules/fp-ts/es6/Eq.js","webpack://www/./node_modules/fp-ts/es6/NonEmptyArray.js","webpack://www/./node_modules/fp-ts/es6/Ord.js","webpack://www/./node_modules/fp-ts/es6/Semigroup.js","webpack://www/./node_modules/fp-ts/es6/ReadonlyNonEmptyArray.js","webpack://www/./node_modules/fp-ts/es6/function.js","webpack://www/./node_modules/fp-ts/es6/internal.js","webpack://www/./node_modules/core-js/modules/es.global-this.js","webpack://www/./node_modules/core-js/modules/esnext.global-this.js","webpack://www/./src/consts/index.ts","webpack://www/./src/pages/points-viewer.tsx","webpack://www/./src/util.ts","webpack://www/../pkg/irradiance_wasm_bg.js"],"sourcesContent":["var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { fromEquals } from './Eq';\nimport { fromEitherK as fromEitherK_ } from './FromEither';\nimport { identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport * as N from './number';\nimport { fromCompare } from './Ord';\nimport * as RNEA from './ReadonlyNonEmptyArray';\nimport { separated } from './Separated';\nimport { filterE as filterE_, wiltDefault, witherDefault } from './Witherable';\nimport { guard as guard_ } from './Zero'; // -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n\n/**\n * Test whether a `ReadonlyArray` is empty.\n *\n * @example\n * import { isEmpty } from 'fp-ts/ReadonlyArray'\n *\n * assert.strictEqual(isEmpty([]), true)\n *\n * @category refinements\n * @since 2.5.0\n */\n\nexport var isEmpty = function isEmpty(as) {\n  return as.length === 0;\n};\n/**\n * Test whether a `ReadonlyArray` is non empty.\n *\n * @category refinements\n * @since 2.5.0\n */\n\nexport var isNonEmpty = RNEA.isNonEmpty; // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Prepend an element to the front of a `ReadonlyArray`, creating a new `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { prepend } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prepend(1)), [1, 2, 3, 4])\n *\n * @category constructors\n * @since 2.10.0\n */\n\nexport var prepend = RNEA.prepend;\n/**\n * Less strict version of [`prepend`](#prepend).\n *\n * @category constructors\n * @since 2.11.0\n */\n\nexport var prependW = RNEA.prependW;\n/**\n * Append an element to the end of a `ReadonlyArray`, creating a new `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { append } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], append(4)), [1, 2, 3, 4])\n *\n * @category constructors\n * @since 2.10.0\n */\n\nexport var append = RNEA.append;\n/**\n * Less strict version of [`append`](#append).\n *\n * @category constructors\n * @since 2.11.0\n */\n\nexport var appendW = RNEA.appendW;\n/**\n * Return a `ReadonlyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { makeBy } from 'fp-ts/ReadonlyArray'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.5.0\n */\n\nexport var makeBy = function makeBy(n, f) {\n  return n <= 0 ? empty : RNEA.makeBy(f)(n);\n};\n/**\n * Create a `ReadonlyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { replicate } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.5.0\n */\n\nexport var replicate = function replicate(n, a) {\n  return makeBy(n, function () {\n    return a;\n  });\n};\nexport function fromPredicate(predicate) {\n  return function (a) {\n    return predicate(a) ? [a] : empty;\n  };\n} // -------------------------------------------------------------------------------------\n// natural transformations\n// -------------------------------------------------------------------------------------\n\n/**\n * @category natural transformations\n * @since 2.11.0\n */\n\nexport var fromOption = function fromOption(ma) {\n  return _.isNone(ma) ? empty : [ma.value];\n};\n/**\n * Transforms an `Either` to a `ReadonlyArray`.\n *\n * @category natural transformations\n * @since 2.11.0\n */\n\nexport var fromEither = function fromEither(e) {\n  return _.isLeft(e) ? empty : [e.right];\n}; // -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Less strict version of [`match`](#match).\n *\n * @category destructors\n * @since 2.11.0\n */\n\nexport var matchW = function matchW(onEmpty, onNonEmpty) {\n  return function (as) {\n    return isNonEmpty(as) ? onNonEmpty(as) : onEmpty();\n  };\n};\n/**\n * @category destructors\n * @since 2.11.0\n */\n\nexport var match = matchW;\n/**\n * Less strict version of [`matchLeft`](#matchleft).\n *\n * @category destructors\n * @since 2.11.0\n */\n\nexport var matchLeftW = function matchLeftW(onEmpty, onNonEmpty) {\n  return function (as) {\n    return isNonEmpty(as) ? onNonEmpty(RNEA.head(as), RNEA.tail(as)) : onEmpty();\n  };\n};\n/**\n * Break a `ReadonlyArray` into its first element and remaining elements.\n *\n * @example\n * import { matchLeft } from 'fp-ts/ReadonlyArray'\n *\n * const len: <A>(as: ReadonlyArray<A>) => number = matchLeft(() => 0, (_, tail) => 1 + len(tail))\n * assert.strictEqual(len([1, 2, 3]), 3)\n *\n * @category destructors\n * @since 2.10.0\n */\n\nexport var matchLeft = matchLeftW;\n/**\n * Alias of [`matchLeft`](#matchleft).\n *\n * @category destructors\n * @since 2.5.0\n */\n\nexport var foldLeft = matchLeft;\n/**\n * Less strict version of [`matchRight`](#matchright).\n *\n * @category destructors\n * @since 2.11.0\n */\n\nexport var matchRightW = function matchRightW(onEmpty, onNonEmpty) {\n  return function (as) {\n    return isNonEmpty(as) ? onNonEmpty(RNEA.init(as), RNEA.last(as)) : onEmpty();\n  };\n};\n/**\n * Break a `ReadonlyArray` into its initial elements and the last element.\n *\n * @category destructors\n * @since 2.10.0\n */\n\nexport var matchRight = matchRightW;\n/**\n * Alias of [`matchRight`](#matchright).\n *\n * @category destructors\n * @since 2.5.0\n */\n\nexport var foldRight = matchRight; // -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n\n/**\n * @category combinators\n * @since 2.7.0\n */\n\nexport var chainWithIndex = function chainWithIndex(f) {\n  return function (as) {\n    if (isEmpty(as)) {\n      return empty;\n    }\n\n    var out = [];\n\n    for (var i = 0; i < as.length; i++) {\n      out.push.apply(out, f(i, as[i]));\n    }\n\n    return out;\n  };\n};\n/**\n * Same as `reduce` but it carries over the intermediate steps.\n *\n * @example\n * import { scanLeft } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var scanLeft = function scanLeft(b, f) {\n  return function (as) {\n    var len = as.length;\n    var out = new Array(len + 1);\n    out[0] = b;\n\n    for (var i = 0; i < len; i++) {\n      out[i + 1] = f(out[i], as[i]);\n    }\n\n    return out;\n  };\n};\n/**\n * Fold an array from the right, keeping all intermediate results instead of only the final result\n *\n * @example\n * import { scanRight } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var scanRight = function scanRight(b, f) {\n  return function (as) {\n    var len = as.length;\n    var out = new Array(len + 1);\n    out[len] = b;\n\n    for (var i = len - 1; i >= 0; i--) {\n      out[i] = f(as[i], out[i + 1]);\n    }\n\n    return out;\n  };\n};\n/**\n * Calculate the number of elements in a `ReadonlyArray`.\n *\n * @since 2.10.0\n */\n\nexport var size = function size(as) {\n  return as.length;\n};\n/**\n * Test whether an array contains a particular index\n *\n * @since 2.5.0\n */\n\nexport var isOutOfBound = RNEA.isOutOfBound;\nexport function lookup(i, as) {\n  return as === undefined ? function (as) {\n    return lookup(i, as);\n  } : isOutOfBound(i, as) ? _.none : _.some(as[i]);\n}\n/**\n * Get the first element in an array, or `None` if the array is empty\n *\n * @example\n * import { head } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(head([1, 2, 3]), some(1))\n * assert.deepStrictEqual(head([]), none)\n *\n * @since 2.5.0\n */\n\nexport var head = function head(as) {\n  return isNonEmpty(as) ? _.some(RNEA.head(as)) : _.none;\n};\n/**\n * Get the last element in an array, or `None` if the array is empty\n *\n * @example\n * import { last } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(last([1, 2, 3]), some(3))\n * assert.deepStrictEqual(last([]), none)\n *\n * @since 2.5.0\n */\n\nexport var last = function last(as) {\n  return isNonEmpty(as) ? _.some(RNEA.last(as)) : _.none;\n};\n/**\n * Get all but the first element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { tail } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(tail([]), none)\n *\n * @since 2.5.0\n */\n\nexport var tail = function tail(as) {\n  return isNonEmpty(as) ? _.some(RNEA.tail(as)) : _.none;\n};\n/**\n * Get all but the last element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { init } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))\n * assert.deepStrictEqual(init([]), none)\n *\n * @since 2.5.0\n */\n\nexport var init = function init(as) {\n  return isNonEmpty(as) ? _.some(RNEA.init(as)) : _.none;\n};\n/**\n * Keep only a max number of elements from the start of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.takeLeft(2)), [1, 2])\n *\n * // out of bounds\n * assert.strictEqual(pipe(input, RA.takeLeft(4)), input)\n * assert.strictEqual(pipe(input, RA.takeLeft(-1)), input)\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var takeLeft = function takeLeft(n) {\n  return function (as) {\n    return isOutOfBound(n, as) ? as : n === 0 ? empty : as.slice(0, n);\n  };\n};\n/**\n * Keep only a max number of elements from the end of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.takeRight(2)), [2, 3])\n *\n * // out of bounds\n * assert.strictEqual(pipe(input, RA.takeRight(4)), input)\n * assert.strictEqual(pipe(input, RA.takeRight(-1)), input)\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var takeRight = function takeRight(n) {\n  return function (as) {\n    return isOutOfBound(n, as) ? as : n === 0 ? empty : as.slice(-n);\n  };\n};\nexport function takeLeftWhile(predicate) {\n  return function (as) {\n    var out = [];\n\n    for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n      var a = as_1[_i];\n\n      if (!predicate(a)) {\n        break;\n      }\n\n      out.push(a);\n    }\n\n    var len = out.length;\n    return len === as.length ? as : len === 0 ? empty : out;\n  };\n}\n\nvar spanLeftIndex = function spanLeftIndex(as, predicate) {\n  var l = as.length;\n  var i = 0;\n\n  for (; i < l; i++) {\n    if (!predicate(as[i])) {\n      break;\n    }\n  }\n\n  return i;\n};\n\nexport function spanLeft(predicate) {\n  return function (as) {\n    var _a = splitAt(spanLeftIndex(as, predicate))(as),\n        init = _a[0],\n        rest = _a[1];\n\n    return {\n      init: init,\n      rest: rest\n    };\n  };\n}\n/**\n * Drop a max number of elements from the start of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.dropLeft(2)), [3])\n * assert.strictEqual(pipe(input, RA.dropLeft(0)), input)\n * assert.strictEqual(pipe(input, RA.dropLeft(-1)), input)\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var dropLeft = function dropLeft(n) {\n  return function (as) {\n    return n <= 0 || isEmpty(as) ? as : n >= as.length ? empty : as.slice(n, as.length);\n  };\n};\n/**\n * Drop a max number of elements from the end of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.dropRight(2)), [1])\n * assert.strictEqual(pipe(input, RA.dropRight(0)), input)\n * assert.strictEqual(pipe(input, RA.dropRight(-1)), input)\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var dropRight = function dropRight(n) {\n  return function (as) {\n    return n <= 0 || isEmpty(as) ? as : n >= as.length ? empty : as.slice(0, as.length - n);\n  };\n};\nexport function dropLeftWhile(predicate) {\n  return function (as) {\n    var i = spanLeftIndex(as, predicate);\n    return i === 0 ? as : i === as.length ? empty : as.slice(i);\n  };\n}\n/**\n * Find the first index for which a predicate holds\n *\n * @example\n * import { findIndex } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)\n *\n * @since 2.5.0\n */\n\nexport var findIndex = function findIndex(predicate) {\n  return function (as) {\n    for (var i = 0; i < as.length; i++) {\n      if (predicate(as[i])) {\n        return _.some(i);\n      }\n    }\n\n    return _.none;\n  };\n};\nexport function findFirst(predicate) {\n  return function (as) {\n    for (var i = 0; i < as.length; i++) {\n      if (predicate(as[i])) {\n        return _.some(as[i]);\n      }\n    }\n\n    return _.none;\n  };\n}\n/**\n * Find the first element returned by an option based selector function\n *\n * @example\n * import { findFirstMap } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age?: number\n * }\n *\n * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the first person that has an age\n * assert.deepStrictEqual(findFirstMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Mary'))\n *\n * @since 2.5.0\n */\n\nexport var findFirstMap = function findFirstMap(f) {\n  return function (as) {\n    for (var i = 0; i < as.length; i++) {\n      var out = f(as[i]);\n\n      if (_.isSome(out)) {\n        return out;\n      }\n    }\n\n    return _.none;\n  };\n};\nexport function findLast(predicate) {\n  return function (as) {\n    for (var i = as.length - 1; i >= 0; i--) {\n      if (predicate(as[i])) {\n        return _.some(as[i]);\n      }\n    }\n\n    return _.none;\n  };\n}\n/**\n * Find the last element returned by an option based selector function\n *\n * @example\n * import { findLastMap } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age?: number\n * }\n *\n * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the last person that has an age\n * assert.deepStrictEqual(findLastMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Joey'))\n *\n * @since 2.5.0\n */\n\nexport var findLastMap = function findLastMap(f) {\n  return function (as) {\n    for (var i = as.length - 1; i >= 0; i--) {\n      var out = f(as[i]);\n\n      if (_.isSome(out)) {\n        return out;\n      }\n    }\n\n    return _.none;\n  };\n};\n/**\n * Returns the index of the last element of the list which matches the predicate\n *\n * @example\n * import { findLastIndex } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface X {\n *   readonly a: number\n *   readonly b: number\n * }\n * const xs: ReadonlyArray<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 1)(xs), some(1))\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 4)(xs), none)\n *\n *\n * @since 2.5.0\n */\n\nexport var findLastIndex = function findLastIndex(predicate) {\n  return function (as) {\n    for (var i = as.length - 1; i >= 0; i--) {\n      if (predicate(as[i])) {\n        return _.some(i);\n      }\n    }\n\n    return _.none;\n  };\n};\n/**\n * Insert an element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { insertAt } from 'fp-ts/ReadonlyArray'\n * import { some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))\n *\n * @since 2.5.0\n */\n\nexport var insertAt = function insertAt(i, a) {\n  return function (as) {\n    return i < 0 || i > as.length ? _.none : _.some(RNEA.unsafeInsertAt(i, a, as));\n  };\n};\n/**\n * Change the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { updateAt } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))\n * assert.deepStrictEqual(updateAt(1, 1)([]), none)\n *\n * @since 2.5.0\n */\n\nexport var updateAt = function updateAt(i, a) {\n  return modifyAt(i, function () {\n    return a;\n  });\n};\n/**\n * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { deleteAt } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(deleteAt(1)([]), none)\n *\n * @since 2.5.0\n */\n\nexport var deleteAt = function deleteAt(i) {\n  return function (as) {\n    return isOutOfBound(i, as) ? _.none : _.some(unsafeDeleteAt(i, as));\n  };\n};\n/**\n * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out\n * of bounds\n *\n * @example\n * import { modifyAt } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * const double = (x: number): number => x * 2\n * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))\n * assert.deepStrictEqual(modifyAt(1, double)([]), none)\n *\n * @since 2.5.0\n */\n\nexport var modifyAt = function modifyAt(i, f) {\n  return function (as) {\n    return isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as));\n  };\n};\n/**\n * Reverse an array, creating a new array\n *\n * @example\n * import { reverse } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var reverse = function reverse(as) {\n  return as.length <= 1 ? as : as.slice().reverse();\n};\n/**\n * Extracts from an array of `Either` all the `Right` elements. All the `Right` elements are extracted in order\n *\n * @example\n * import { rights } from 'fp-ts/ReadonlyArray'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var rights = function rights(as) {\n  var r = [];\n\n  for (var i = 0; i < as.length; i++) {\n    var a = as[i];\n\n    if (a._tag === 'Right') {\n      r.push(a.right);\n    }\n  }\n\n  return r;\n};\n/**\n * Extracts from an array of `Either` all the `Left` elements. All the `Left` elements are extracted in order\n *\n * @example\n * import { lefts } from 'fp-ts/ReadonlyArray'\n * import { left, right } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var lefts = function lefts(as) {\n  var r = [];\n\n  for (var i = 0; i < as.length; i++) {\n    var a = as[i];\n\n    if (a._tag === 'Left') {\n      r.push(a.left);\n    }\n  }\n\n  return r;\n};\n/**\n * Sort the elements of an array in increasing order, creating a new array\n *\n * @example\n * import { sort } from 'fp-ts/ReadonlyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(sort(N.Ord)([3, 2, 1]), [1, 2, 3])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var sort = function sort(O) {\n  return function (as) {\n    return as.length <= 1 ? as : as.slice().sort(O.compare);\n  };\n}; // TODO: curry and make data-last in v3\n\n/**\n * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one\n * input array is short, excess elements of the longer array are discarded.\n *\n * @example\n * import { zipWith } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var zipWith = function zipWith(fa, fb, f) {\n  var fc = [];\n  var len = Math.min(fa.length, fb.length);\n\n  for (var i = 0; i < len; i++) {\n    fc[i] = f(fa[i], fb[i]);\n  }\n\n  return fc;\n};\nexport function zip(as, bs) {\n  if (bs === undefined) {\n    return function (bs) {\n      return zip(bs, as);\n    };\n  }\n\n  return zipWith(as, bs, function (a, b) {\n    return [a, b];\n  });\n}\n/**\n * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays\n *\n * @example\n * import { unzip } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var unzip = function unzip(as) {\n  var fa = [];\n  var fb = [];\n\n  for (var i = 0; i < as.length; i++) {\n    fa[i] = as[i][0];\n    fb[i] = as[i][1];\n  }\n\n  return [fa, fb];\n};\n/**\n * Prepend an element to every member of an array\n *\n * @example\n * import { prependAll } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var prependAll = function prependAll(middle) {\n  var f = RNEA.prependAll(middle);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : as;\n  };\n};\n/**\n * Places an element in between members of an array\n *\n * @example\n * import { intersperse } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.9.0\n */\n\nexport var intersperse = function intersperse(middle) {\n  var f = RNEA.intersperse(middle);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : as;\n  };\n};\n/**\n * Rotate a `ReadonlyArray` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var rotate = function rotate(n) {\n  var f = RNEA.rotate(n);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : as;\n  };\n};\nexport function elem(E) {\n  return function (a, as) {\n    if (as === undefined) {\n      var elemE_1 = elem(E);\n      return function (as) {\n        return elemE_1(a, as);\n      };\n    }\n\n    var predicate = function predicate(element) {\n      return E.equals(element, a);\n    };\n\n    var i = 0;\n\n    for (; i < as.length; i++) {\n      if (predicate(as[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n}\n/**\n * Remove duplicates from an array, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/ReadonlyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var uniq = function uniq(E) {\n  var f = RNEA.uniq(E);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : as;\n  };\n};\n/**\n * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import { sortBy } from 'fp-ts/ReadonlyArray'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age: number\n * }\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = sortBy([byName, byAge])\n *\n * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var sortBy = function sortBy(ords) {\n  var f = RNEA.sortBy(ords);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : as;\n  };\n};\n/**\n * A useful recursion pattern for processing a `ReadonlyArray` to produce a new `ReadonlyArray`, often used for \"chopping\" up the input\n * `ReadonlyArray`. Typically `chop` is called with some function that will consume an initial prefix of the `ReadonlyArray` and produce a\n * value and the tail of the `ReadonlyArray`.\n *\n * @example\n * import { Eq } from 'fp-ts/Eq'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * const group = <A>(S: Eq<A>): ((as: ReadonlyArray<A>) => ReadonlyArray<ReadonlyArray<A>>) => {\n *   return RA.chop(as => {\n *     const { init, rest } = pipe(as, RA.spanLeft((a: A) => S.equals(a, as[0])))\n *     return [init, rest]\n *   })\n * }\n * assert.deepStrictEqual(group(N.Eq)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var chop = function chop(f) {\n  var g = RNEA.chop(f);\n  return function (as) {\n    return isNonEmpty(as) ? g(as) : empty;\n  };\n};\n/**\n * Splits a `ReadonlyArray` into two pieces, the first piece has max `n` elements.\n *\n * @example\n * import { splitAt } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var splitAt = function splitAt(n) {\n  return function (as) {\n    return n >= 1 && isNonEmpty(as) ? RNEA.splitAt(n)(as) : isEmpty(as) ? [as, empty] : [empty, as];\n  };\n};\n/**\n * Splits a `ReadonlyArray` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `ReadonlyArray`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that:\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `as`.\n *\n * @example\n * import { chunksOf } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var chunksOf = function chunksOf(n) {\n  var f = RNEA.chunksOf(n);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : empty;\n  };\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\n\nexport var fromOptionK = function fromOptionK(f) {\n  return function () {\n    var a = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      a[_i] = arguments[_i];\n    }\n\n    return fromOption(f.apply(void 0, a));\n  };\n};\nexport function comprehension(input, f, g) {\n  if (g === void 0) {\n    g = function g() {\n      return true;\n    };\n  }\n\n  var go = function go(scope, input) {\n    return isNonEmpty(input) ? pipe(RNEA.head(input), chain(function (x) {\n      return go(pipe(scope, append(x)), RNEA.tail(input));\n    })) : g.apply(void 0, scope) ? [f.apply(void 0, scope)] : empty;\n  };\n\n  return go(empty, input);\n}\n/**\n * @category combinators\n * @since 2.11.0\n */\n\nexport var concatW = function concatW(second) {\n  return function (first) {\n    return isEmpty(first) ? second : isEmpty(second) ? first : first.concat(second);\n  };\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\n\nexport var concat = concatW;\nexport function union(E) {\n  var unionE = RNEA.union(E);\n  return function (first, second) {\n    if (second === undefined) {\n      var unionE_1 = union(E);\n      return function (second) {\n        return unionE_1(second, first);\n      };\n    }\n\n    return isNonEmpty(first) && isNonEmpty(second) ? unionE(second)(first) : isNonEmpty(first) ? first : second;\n  };\n}\nexport function intersection(E) {\n  var elemE = elem(E);\n  return function (xs, ys) {\n    if (ys === undefined) {\n      var intersectionE_1 = intersection(E);\n      return function (ys) {\n        return intersectionE_1(ys, xs);\n      };\n    }\n\n    return xs.filter(function (a) {\n      return elemE(a, ys);\n    });\n  };\n}\nexport function difference(E) {\n  var elemE = elem(E);\n  return function (xs, ys) {\n    if (ys === undefined) {\n      var differenceE_1 = difference(E);\n      return function (ys) {\n        return differenceE_1(ys, xs);\n      };\n    }\n\n    return xs.filter(function (a) {\n      return !elemE(a, ys);\n    });\n  };\n} // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\nvar _map = function _map(fa, f) {\n  return pipe(fa, map(f));\n};\n\nvar _mapWithIndex = function _mapWithIndex(fa, f) {\n  return pipe(fa, mapWithIndex(f));\n};\n\nvar _ap = function _ap(fab, fa) {\n  return pipe(fab, ap(fa));\n};\n\nvar _chain = function _chain(ma, f) {\n  return pipe(ma, chain(f));\n};\n\nvar _filter = function _filter(fa, predicate) {\n  return pipe(fa, filter(predicate));\n};\n\nvar _filterMap = function _filterMap(fa, f) {\n  return pipe(fa, filterMap(f));\n};\n\nvar _partition = function _partition(fa, predicate) {\n  return pipe(fa, partition(predicate));\n};\n\nvar _partitionMap = function _partitionMap(fa, f) {\n  return pipe(fa, partitionMap(f));\n};\n\nvar _partitionWithIndex = function _partitionWithIndex(fa, predicateWithIndex) {\n  return pipe(fa, partitionWithIndex(predicateWithIndex));\n};\n\nvar _partitionMapWithIndex = function _partitionMapWithIndex(fa, f) {\n  return pipe(fa, partitionMapWithIndex(f));\n};\n\nvar _alt = function _alt(fa, that) {\n  return pipe(fa, alt(that));\n};\n\nvar _reduce = function _reduce(fa, b, f) {\n  return pipe(fa, reduce(b, f));\n};\n\nvar _foldMap = function _foldMap(M) {\n  var foldMapM = foldMap(M);\n  return function (fa, f) {\n    return pipe(fa, foldMapM(f));\n  };\n};\n\nvar _reduceRight = function _reduceRight(fa, b, f) {\n  return pipe(fa, reduceRight(b, f));\n};\n\nvar _reduceWithIndex = function _reduceWithIndex(fa, b, f) {\n  return pipe(fa, reduceWithIndex(b, f));\n};\n\nvar _foldMapWithIndex = function _foldMapWithIndex(M) {\n  var foldMapWithIndexM = foldMapWithIndex(M);\n  return function (fa, f) {\n    return pipe(fa, foldMapWithIndexM(f));\n  };\n};\n\nvar _reduceRightWithIndex = function _reduceRightWithIndex(fa, b, f) {\n  return pipe(fa, reduceRightWithIndex(b, f));\n};\n\nvar _filterMapWithIndex = function _filterMapWithIndex(fa, f) {\n  return pipe(fa, filterMapWithIndex(f));\n};\n\nvar _filterWithIndex = function _filterWithIndex(fa, predicateWithIndex) {\n  return pipe(fa, filterWithIndex(predicateWithIndex));\n};\n\nvar _extend = function _extend(fa, f) {\n  return pipe(fa, extend(f));\n};\n\nvar _traverse = function _traverse(F) {\n  var traverseF = traverse(F);\n  return function (ta, f) {\n    return pipe(ta, traverseF(f));\n  };\n};\n/* istanbul ignore next */\n\n\nvar _traverseWithIndex = function _traverseWithIndex(F) {\n  var traverseWithIndexF = traverseWithIndex(F);\n  return function (ta, f) {\n    return pipe(ta, traverseWithIndexF(f));\n  };\n};\n/** @internal */\n\n\nexport var _chainRecDepthFirst = function _chainRecDepthFirst(a, f) {\n  return pipe(a, chainRecDepthFirst(f));\n};\n/** @internal */\n\nexport var _chainRecBreadthFirst = function _chainRecBreadthFirst(a, f) {\n  return pipe(a, chainRecBreadthFirst(f));\n}; // -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n\n/**\n * @category Pointed\n * @since 2.5.0\n */\n\nexport var of = RNEA.of;\n/**\n * @category Zero\n * @since 2.7.0\n */\n\nexport var zero = function zero() {\n  return empty;\n};\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\n\nexport var altW = function altW(that) {\n  return function (fa) {\n    return fa.concat(that());\n  };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.5.0\n */\n\nexport var alt = altW;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.5.0\n */\n\nexport var ap = function ap(fa) {\n  return chain(function (f) {\n    return pipe(fa, map(f));\n  });\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.5.0\n */\n\nexport var chain = function chain(f) {\n  return function (ma) {\n    return pipe(ma, chainWithIndex(function (_, a) {\n      return f(a);\n    }));\n  };\n};\n/**\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var flatten = /*#__PURE__*/chain(identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.5.0\n */\n\nexport var map = function map(f) {\n  return function (fa) {\n    return fa.map(function (a) {\n      return f(a);\n    });\n  };\n};\n/**\n * @category FunctorWithIndex\n * @since 2.5.0\n */\n\nexport var mapWithIndex = function mapWithIndex(f) {\n  return function (fa) {\n    return fa.map(function (a, i) {\n      return f(i, a);\n    });\n  };\n};\n/**\n * @category Compactable\n * @since 2.5.0\n */\n\nexport var separate = function separate(fa) {\n  var left = [];\n  var right = [];\n\n  for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {\n    var e = fa_1[_i];\n\n    if (e._tag === 'Left') {\n      left.push(e.left);\n    } else {\n      right.push(e.right);\n    }\n  }\n\n  return separated(left, right);\n};\n/**\n * @category Filterable\n * @since 2.5.0\n */\n\nexport var filter = function filter(predicate) {\n  return function (as) {\n    return as.filter(predicate);\n  };\n};\n/**\n * @category FilterableWithIndex\n * @since 2.5.0\n */\n\nexport var filterMapWithIndex = function filterMapWithIndex(f) {\n  return function (fa) {\n    var out = [];\n\n    for (var i = 0; i < fa.length; i++) {\n      var optionB = f(i, fa[i]);\n\n      if (_.isSome(optionB)) {\n        out.push(optionB.value);\n      }\n    }\n\n    return out;\n  };\n};\n/**\n * @category Filterable\n * @since 2.5.0\n */\n\nexport var filterMap = function filterMap(f) {\n  return filterMapWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * @category Compactable\n * @since 2.5.0\n */\n\nexport var compact = /*#__PURE__*/filterMap(identity);\n/**\n * @category Filterable\n * @since 2.5.0\n */\n\nexport var partition = function partition(predicate) {\n  return partitionWithIndex(function (_, a) {\n    return predicate(a);\n  });\n};\n/**\n * @category FilterableWithIndex\n * @since 2.5.0\n */\n\nexport var partitionWithIndex = function partitionWithIndex(predicateWithIndex) {\n  return function (as) {\n    var left = [];\n    var right = [];\n\n    for (var i = 0; i < as.length; i++) {\n      var a = as[i];\n\n      if (predicateWithIndex(i, a)) {\n        right.push(a);\n      } else {\n        left.push(a);\n      }\n    }\n\n    return separated(left, right);\n  };\n};\n/**\n * @category Filterable\n * @since 2.5.0\n */\n\nexport var partitionMap = function partitionMap(f) {\n  return partitionMapWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * @category FilterableWithIndex\n * @since 2.5.0\n */\n\nexport var partitionMapWithIndex = function partitionMapWithIndex(f) {\n  return function (fa) {\n    var left = [];\n    var right = [];\n\n    for (var i = 0; i < fa.length; i++) {\n      var e = f(i, fa[i]);\n\n      if (e._tag === 'Left') {\n        left.push(e.left);\n      } else {\n        right.push(e.right);\n      }\n    }\n\n    return separated(left, right);\n  };\n};\n/**\n * @category FilterableWithIndex\n * @since 2.5.0\n */\n\nexport var filterWithIndex = function filterWithIndex(predicateWithIndex) {\n  return function (as) {\n    return as.filter(function (a, i) {\n      return predicateWithIndex(i, a);\n    });\n  };\n};\n/**\n * @category Extend\n * @since 2.5.0\n */\n\nexport var extend = function extend(f) {\n  return function (wa) {\n    return wa.map(function (_, i) {\n      return f(wa.slice(i));\n    });\n  };\n};\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var duplicate = /*#__PURE__*/extend(identity);\n/**\n * @category FoldableWithIndex\n * @since 2.5.0\n */\n\nexport var foldMapWithIndex = function foldMapWithIndex(M) {\n  return function (f) {\n    return function (fa) {\n      return fa.reduce(function (b, a, i) {\n        return M.concat(b, f(i, a));\n      }, M.empty);\n    };\n  };\n};\n/**\n * @category Foldable\n * @since 2.5.0\n */\n\nexport var reduce = function reduce(b, f) {\n  return reduceWithIndex(b, function (_, b, a) {\n    return f(b, a);\n  });\n};\n/**\n * @category Foldable\n * @since 2.5.0\n */\n\nexport var foldMap = function foldMap(M) {\n  var foldMapWithIndexM = foldMapWithIndex(M);\n  return function (f) {\n    return foldMapWithIndexM(function (_, a) {\n      return f(a);\n    });\n  };\n};\n/**\n * @category FoldableWithIndex\n * @since 2.5.0\n */\n\nexport var reduceWithIndex = function reduceWithIndex(b, f) {\n  return function (fa) {\n    var len = fa.length;\n    var out = b;\n\n    for (var i = 0; i < len; i++) {\n      out = f(i, out, fa[i]);\n    }\n\n    return out;\n  };\n};\n/**\n * @category Foldable\n * @since 2.5.0\n */\n\nexport var reduceRight = function reduceRight(b, f) {\n  return reduceRightWithIndex(b, function (_, a, b) {\n    return f(a, b);\n  });\n};\n/**\n * @category FoldableWithIndex\n * @since 2.5.0\n */\n\nexport var reduceRightWithIndex = function reduceRightWithIndex(b, f) {\n  return function (fa) {\n    return fa.reduceRight(function (b, a, i) {\n      return f(i, a, b);\n    }, b);\n  };\n};\n/**\n * @category Traversable\n * @since 2.6.3\n */\n\nexport var traverse = function traverse(F) {\n  var traverseWithIndexF = traverseWithIndex(F);\n  return function (f) {\n    return traverseWithIndexF(function (_, a) {\n      return f(a);\n    });\n  };\n};\n/**\n * @category Traversable\n * @since 2.6.3\n */\n\nexport var sequence = function sequence(F) {\n  return function (ta) {\n    return _reduce(ta, F.of(zero()), function (fas, fa) {\n      return F.ap(F.map(fas, function (as) {\n        return function (a) {\n          return pipe(as, append(a));\n        };\n      }), fa);\n    });\n  };\n};\n/**\n * @category TraversableWithIndex\n * @since 2.6.3\n */\n\nexport var traverseWithIndex = function traverseWithIndex(F) {\n  return function (f) {\n    return reduceWithIndex(F.of(zero()), function (i, fbs, a) {\n      return F.ap(F.map(fbs, function (bs) {\n        return function (b) {\n          return pipe(bs, append(b));\n        };\n      }), f(i, a));\n    });\n  };\n};\n/**\n * @category Witherable\n * @since 2.6.5\n */\n\nexport var wither = function wither(F) {\n  var _witherF = _wither(F);\n\n  return function (f) {\n    return function (fa) {\n      return _witherF(fa, f);\n    };\n  };\n};\n/**\n * @category Witherable\n * @since 2.6.5\n */\n\nexport var wilt = function wilt(F) {\n  var _wiltF = _wilt(F);\n\n  return function (f) {\n    return function (fa) {\n      return _wiltF(fa, f);\n    };\n  };\n};\n/**\n * @category Unfoldable\n * @since 2.6.6\n */\n\nexport var unfold = function unfold(b, f) {\n  var out = [];\n  var bb = b;\n\n  while (true) {\n    var mt = f(bb);\n\n    if (_.isSome(mt)) {\n      var _a = mt.value,\n          a = _a[0],\n          b_1 = _a[1];\n      out.push(a);\n      bb = b_1;\n    } else {\n      break;\n    }\n  }\n\n  return out;\n}; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.5.0\n */\n\nexport var URI = 'ReadonlyArray';\n/**\n * @category instances\n * @since 2.5.0\n */\n\nexport var getShow = function getShow(S) {\n  return {\n    show: function show(as) {\n      return \"[\" + as.map(S.show).join(', ') + \"]\";\n    }\n  };\n};\n/**\n * @category instances\n * @since 2.5.0\n */\n\nexport var getSemigroup = function getSemigroup() {\n  return {\n    concat: function concat(first, second) {\n      return isEmpty(first) ? second : isEmpty(second) ? first : first.concat(second);\n    }\n  };\n};\n/**\n * Returns a `Monoid` for `ReadonlyArray<A>`.\n *\n * @example\n * import { getMonoid } from 'fp-ts/ReadonlyArray'\n *\n * const M = getMonoid<number>()\n * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])\n *\n * @category instances\n * @since 2.5.0\n */\n\nexport var getMonoid = function getMonoid() {\n  return {\n    concat: getSemigroup().concat,\n    empty: empty\n  };\n};\n/**\n * Derives an `Eq` over the `ReadonlyArray` of a given element type from the `Eq` of that type. The derived `Eq` defines two\n * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of\n * different lengths, the result is non equality.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { getEq } from 'fp-ts/ReadonlyArray'\n *\n * const E = getEq(S.Eq)\n * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)\n * assert.strictEqual(E.equals(['a'], []), false)\n *\n * @category instances\n * @since 2.5.0\n */\n\nexport var getEq = function getEq(E) {\n  return fromEquals(function (xs, ys) {\n    return xs.length === ys.length && xs.every(function (x, i) {\n      return E.equals(x, ys[i]);\n    });\n  });\n};\n/**\n * Derives an `Ord` over the `ReadonlyArray` of a given element type from the `Ord` of that type. The ordering between two such\n * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in\n * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have\n * the same length, the result is equality.\n *\n * @example\n * import { getOrd } from 'fp-ts/ReadonlyArray'\n * import * as S from 'fp-ts/string'\n *\n * const O = getOrd(S.Ord)\n * assert.strictEqual(O.compare(['b'], ['a']), 1)\n * assert.strictEqual(O.compare(['a'], ['a']), 0)\n * assert.strictEqual(O.compare(['a'], ['b']), -1)\n *\n *\n * @category instances\n * @since 2.5.0\n */\n\nexport var getOrd = function getOrd(O) {\n  return fromCompare(function (a, b) {\n    var aLen = a.length;\n    var bLen = b.length;\n    var len = Math.min(aLen, bLen);\n\n    for (var i = 0; i < len; i++) {\n      var ordering = O.compare(a[i], b[i]);\n\n      if (ordering !== 0) {\n        return ordering;\n      }\n    }\n\n    return N.Ord.compare(aLen, bLen);\n  });\n};\n/**\n * @category instances\n * @since 2.11.0\n */\n\nexport var getUnionSemigroup = function getUnionSemigroup(E) {\n  var unionE = union(E);\n  return {\n    concat: function concat(first, second) {\n      return unionE(second)(first);\n    }\n  };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\n\nexport var getUnionMonoid = function getUnionMonoid(E) {\n  return {\n    concat: getUnionSemigroup(E).concat,\n    empty: empty\n  };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\n\nexport var getIntersectionSemigroup = function getIntersectionSemigroup(E) {\n  var intersectionE = intersection(E);\n  return {\n    concat: function concat(first, second) {\n      return intersectionE(second)(first);\n    }\n  };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\n\nexport var getDifferenceMagma = function getDifferenceMagma(E) {\n  var differenceE = difference(E);\n  return {\n    concat: function concat(first, second) {\n      return differenceE(second)(first);\n    }\n  };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Functor = {\n  URI: URI,\n  map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var flap = /*#__PURE__*/flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Pointed = {\n  URI: URI,\n  of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var FunctorWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Apply = {\n  URI: URI,\n  map: _map,\n  ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var apFirst = /*#__PURE__*/apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var apSecond = /*#__PURE__*/apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Applicative = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Chain = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Monad = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of,\n  chain: _chain\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var chainFirst = /*#__PURE__*/chainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Unfoldable = {\n  URI: URI,\n  unfold: unfold\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Alt = {\n  URI: URI,\n  map: _map,\n  alt: _alt\n};\n/**\n * @category instances\n * @since 2.11.0\n */\n\nexport var Zero = {\n  URI: URI,\n  zero: zero\n};\n/**\n * @category constructors\n * @since 2.11.0\n */\n\nexport var guard = /*#__PURE__*/guard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Alternative = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of,\n  alt: _alt,\n  zero: zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Extend = {\n  URI: URI,\n  map: _map,\n  extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Compactable = {\n  URI: URI,\n  compact: compact,\n  separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Filterable = {\n  URI: URI,\n  map: _map,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var FilterableWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  partitionMapWithIndex: _partitionMapWithIndex,\n  partitionWithIndex: _partitionWithIndex,\n  filterMapWithIndex: _filterMapWithIndex,\n  filterWithIndex: _filterWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Foldable = {\n  URI: URI,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var FoldableWithIndex = {\n  URI: URI,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Traversable = {\n  URI: URI,\n  map: _map,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var TraversableWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex,\n  traverse: _traverse,\n  sequence: sequence,\n  traverseWithIndex: _traverseWithIndex\n};\n/**\n * @category ChainRec\n * @since 2.11.0\n */\n\nexport var chainRecDepthFirst = function chainRecDepthFirst(f) {\n  return function (a) {\n    var todo = __spreadArray([], f(a));\n\n    var out = [];\n\n    while (todo.length > 0) {\n      var e = todo.shift();\n\n      if (_.isLeft(e)) {\n        todo.unshift.apply(todo, f(e.left));\n      } else {\n        out.push(e.right);\n      }\n    }\n\n    return out;\n  };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\n\nexport var ChainRecDepthFirst = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain,\n  chainRec: _chainRecDepthFirst\n};\n/**\n * @category ChainRec\n * @since 2.11.0\n */\n\nexport var chainRecBreadthFirst = function chainRecBreadthFirst(f) {\n  return function (a) {\n    var initial = f(a);\n    var todo = [];\n    var out = [];\n\n    function go(e) {\n      if (_.isLeft(e)) {\n        f(e.left).forEach(function (v) {\n          return todo.push(v);\n        });\n      } else {\n        out.push(e.right);\n      }\n    }\n\n    for (var _i = 0, initial_1 = initial; _i < initial_1.length; _i++) {\n      var e = initial_1[_i];\n      go(e);\n    }\n\n    while (todo.length > 0) {\n      go(todo.shift());\n    }\n\n    return out;\n  };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\n\nexport var ChainRecBreadthFirst = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain,\n  chainRec: _chainRecBreadthFirst\n};\n\nvar _wither = /*#__PURE__*/witherDefault(Traversable, Compactable);\n\nvar _wilt = /*#__PURE__*/wiltDefault(Traversable, Compactable);\n/**\n * @category instances\n * @since 2.7.0\n */\n\n\nexport var Witherable = {\n  URI: URI,\n  map: _map,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence,\n  wither: _wither,\n  wilt: _wilt\n};\n/**\n * Filter values inside a context.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as T from 'fp-ts/Task'\n *\n * const filterE = RA.filterE(T.ApplicativePar)\n * async function test() {\n *   assert.deepStrictEqual(\n *     await pipe(\n *       [-1, 2, 3],\n *       filterE((n) => T.of(n > 0))\n *     )(),\n *     [2, 3]\n *   )\n * }\n * test()\n *\n * @since 2.11.0\n */\n\nexport var filterE = /*#__PURE__*/filterE_(Witherable);\n/**\n * @category instances\n * @since 2.11.0\n */\n\nexport var FromEither = {\n  URI: URI,\n  fromEither: fromEither\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\n\nexport var fromEitherK = /*#__PURE__*/fromEitherK_(FromEither); // -------------------------------------------------------------------------------------\n// unsafe\n// -------------------------------------------------------------------------------------\n\n/**\n * @category unsafe\n * @since 2.5.0\n */\n\nexport var unsafeInsertAt = RNEA.unsafeInsertAt;\n/**\n * @category unsafe\n * @since 2.5.0\n */\n\nexport var unsafeUpdateAt = function unsafeUpdateAt(i, a, as) {\n  return isNonEmpty(as) ? RNEA.unsafeUpdateAt(i, a, as) : as;\n};\n/**\n * @category unsafe\n * @since 2.5.0\n */\n\nexport var unsafeDeleteAt = function unsafeDeleteAt(i, as) {\n  var xs = as.slice();\n  xs.splice(i, 1);\n  return xs;\n}; // -------------------------------------------------------------------------------------\n// interop\n// -------------------------------------------------------------------------------------\n\n/**\n * @category interop\n * @since 2.5.0\n */\n\nexport var toArray = function toArray(as) {\n  return as.slice();\n};\n/**\n * @category interop\n * @since 2.5.0\n */\n\nexport var fromArray = function fromArray(as) {\n  return isEmpty(as) ? empty : as.slice();\n}; // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * An empty array\n *\n * @since 2.5.0\n */\n\nexport var empty = RNEA.empty;\n/**\n * Check if a predicate holds true for every array member.\n *\n * @example\n * import { every } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], every(isPositive)), true)\n * assert.deepStrictEqual(pipe([1, 2, -3], every(isPositive)), false)\n *\n * @since 2.9.0\n */\n\nexport var every = function every(predicate) {\n  return function (as) {\n    return as.every(predicate);\n  };\n};\n/**\n * Check if a predicate holds true for any array member.\n *\n * @example\n * import { some } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(pipe([-1, -2, 3], some(isPositive)), true)\n * assert.deepStrictEqual(pipe([-1, -2, -3], some(isPositive)), false)\n *\n * @since 2.9.0\n */\n\nexport var some = function some(predicate) {\n  return function (as) {\n    return as.some(predicate);\n  };\n};\n/**\n * Alias of [`some`](#some)\n *\n * @since 2.11.0\n */\n\nexport var exists = some; // -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.9.0\n */\n\nexport var Do = /*#__PURE__*/of(_.emptyRecord);\n/**\n * @since 2.8.0\n */\n\nexport var bindTo = /*#__PURE__*/bindTo_(Functor);\n/**\n * @since 2.8.0\n */\n\nexport var bind = /*#__PURE__*/bind_(Chain); // -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.8.0\n */\n\nexport var apS = /*#__PURE__*/apS_(Apply); // -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n// tslint:disable: deprecation\n\n/**\n * Use `ReadonlyNonEmptyArray` module instead.\n *\n * @category constructors\n * @since 2.5.0\n * @deprecated\n */\n\nexport var range = RNEA.range;\n/**\n * Use [`prepend`](#prepend) instead.\n *\n * @category constructors\n * @since 2.5.0\n * @deprecated\n */\n\nexport var cons = RNEA.cons;\n/**\n * Use [`append`](#append) instead.\n *\n * @category constructors\n * @since 2.5.0\n * @deprecated\n */\n\nexport var snoc = RNEA.snoc;\n/**\n * Use [`prependAll`](#prependall) instead.\n *\n * @category combinators\n * @since 2.9.0\n * @deprecated\n */\n\nexport var prependToAll = prependAll;\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.5.0\n * @deprecated\n */\n\nexport var readonlyArray = {\n  URI: URI,\n  compact: compact,\n  separate: separate,\n  map: _map,\n  ap: _ap,\n  of: of,\n  chain: _chain,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  mapWithIndex: _mapWithIndex,\n  partitionMapWithIndex: _partitionMapWithIndex,\n  partitionWithIndex: _partitionWithIndex,\n  filterMapWithIndex: _filterMapWithIndex,\n  filterWithIndex: _filterWithIndex,\n  alt: _alt,\n  zero: zero,\n  unfold: unfold,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex,\n  traverseWithIndex: _traverseWithIndex,\n  extend: _extend,\n  wither: _wither,\n  wilt: _wilt\n};","import { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { fromEitherK as fromEitherK_ } from './FromEither';\nimport { identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport * as NEA from './NonEmptyArray';\nimport * as RA from './ReadonlyArray';\nimport { separated } from './Separated';\nimport { filterE as filterE_, wiltDefault, witherDefault } from './Witherable';\nimport { guard as guard_ } from './Zero'; // -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n\n/**\n * Test whether an array is empty\n *\n * @example\n * import { isEmpty } from 'fp-ts/Array'\n *\n * assert.strictEqual(isEmpty([]), true)\n * assert.strictEqual(isEmpty(['a']), false)\n *\n * @category refinements\n * @since 2.0.0\n */\n\nexport var isEmpty = function isEmpty(as) {\n  return as.length === 0;\n};\n/**\n * Test whether an array is non empty narrowing down the type to `NonEmptyArray<A>`\n *\n * @example\n * import { isNonEmpty } from 'fp-ts/Array'\n *\n * assert.strictEqual(isNonEmpty([]), false)\n * assert.strictEqual(isNonEmpty(['a']), true)\n *\n * @category refinements\n * @since 2.0.0\n */\n\nexport var isNonEmpty = NEA.isNonEmpty; // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Prepend an element to the front of a `Array`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { prepend } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prepend(1)), [1, 2, 3, 4])\n *\n * @category constructors\n * @since 2.10.0\n */\n\nexport var prepend = NEA.prepend;\n/**\n * Less strict version of [`prepend`](#prepend).\n *\n * @example\n * import { prependW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prependW(\"a\")), [\"a\", 2, 3, 4]);\n *\n * @category constructors\n * @since 2.11.0\n */\n\nexport var prependW = NEA.prependW;\n/**\n * Append an element to the end of a `Array`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { append } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], append(4)), [1, 2, 3, 4])\n *\n * @category constructors\n * @since 2.10.0\n */\n\nexport var append = NEA.append;\n/**\n * Less strict version of [`append`](#append).\n *\n * @example\n * import { appendW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], appendW(\"d\")), [1, 2, 3, \"d\"]);\n *\n * @category constructors\n * @since 2.11.0\n */\n\nexport var appendW = NEA.appendW;\n/**\n * Return a `Array` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { makeBy } from 'fp-ts/Array'\n *\n * const double = (i: number): number => i * 2\n * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])\n * assert.deepStrictEqual(makeBy(-3, double), [])\n * assert.deepStrictEqual(makeBy(4.32164, double), [0, 2, 4, 6])\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport var makeBy = function makeBy(n, f) {\n  return n <= 0 ? [] : NEA.makeBy(f)(n);\n};\n/**\n * Create a `Array` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { replicate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])\n * assert.deepStrictEqual(replicate(-3, 'a'), [])\n * assert.deepStrictEqual(replicate(2.985647, 'a'), ['a', 'a'])\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport var replicate = function replicate(n, a) {\n  return makeBy(n, function () {\n    return a;\n  });\n};\nexport function fromPredicate(predicate) {\n  return function (a) {\n    return predicate(a) ? [a] : [];\n  };\n} // -------------------------------------------------------------------------------------\n// natural transformations\n// -------------------------------------------------------------------------------------\n\n/**\n * Create an array from an `Option`. The resulting array will contain the content of the\n * `Option` if it is `Some` and it will be empty if the `Option` is `None`.\n *\n * @example\n * import { fromOption } from 'fp-ts/Array'\n * import { option } from \"fp-ts\";\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(option.some(\"a\"), fromOption),[\"a\"])\n * assert.deepStrictEqual(pipe(option.none, fromOption),[])\n *\n * @category natural transformations\n * @since 2.11.0\n */\n\nexport var fromOption = function fromOption(ma) {\n  return _.isNone(ma) ? [] : [ma.value];\n};\n/**\n * Create an array from an `Either`. The resulting array will contain the content of the\n * `Either` if it is `Right` and it will be empty if the `Either` is `Left`.\n *\n * @example\n * import { fromEither } from 'fp-ts/Array'\n * import { either } from \"fp-ts\";\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(either.right(\"r\"), fromEither), [\"r\"]);\n * assert.deepStrictEqual(pipe(either.left(\"l\"), fromEither), []);\n *\n * @category natural transformations\n * @since 2.11.0\n */\n\nexport var fromEither = function fromEither(e) {\n  return _.isLeft(e) ? [] : [e.right];\n}; // -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Less strict version of [`match`](#match). It will work when `onEmpty` and `onNonEmpty`\n * have different return types.\n *\n * @example\n * import { matchW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const matcherW = matchW(\n *   () => \"No elements\",\n *   (as) => as.length\n * );\n * assert.deepStrictEqual(pipe([1, 2, 3, 4], matcherW), 4);\n * assert.deepStrictEqual(pipe([], matcherW), \"No elements\");\n *\n * @category destructors\n * @since 2.11.0\n */\n\nexport var matchW = function matchW(onEmpty, onNonEmpty) {\n  return function (as) {\n    return isNonEmpty(as) ? onNonEmpty(as) : onEmpty();\n  };\n};\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` and returns the result.\n *\n * @example\n * import { match } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const matcher = match(\n *   () => \"No elements\",\n *   (as) => `Found ${as.length} element(s)`\n * );\n * assert.deepStrictEqual(pipe([1, 2, 3, 4], matcher), \"Found 4 element(s)\");\n * assert.deepStrictEqual(pipe([], matcher), \"No elements\");\n *\n * @category destructors\n * @since 2.11.0\n */\n\nexport var match = matchW;\n/**\n * Less strict version of [`matchLeft`](#matchleft). It will work when `onEmpty` and\n * `onNonEmpty` have different return types.\n *\n * @example\n * import { matchLeftW } from 'fp-ts/Array'\n *\n * const f = matchLeftW(\n *   () => 0,\n *   (head: string, tail: string[]) => `Found \"${head}\" followed by ${tail.length} elements`\n * );\n * assert.strictEqual(f([\"a\", \"b\", \"c\"]), 'Found \"a\" followed by 2 elements');\n * assert.strictEqual(f([]), 0);\n *\n * @category destructors\n * @since 2.11.0\n */\n\nexport var matchLeftW = function matchLeftW(onEmpty, onNonEmpty) {\n  return function (as) {\n    return isNonEmpty(as) ? onNonEmpty(NEA.head(as), NEA.tail(as)) : onEmpty();\n  };\n};\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` broken into its first element and remaining elements.\n *\n * @example\n * import { matchLeft } from 'fp-ts/Array'\n *\n * const len: <A>(as: Array<A>) => number = matchLeft(() => 0, (_, tail) => 1 + len(tail))\n * assert.strictEqual(len([1, 2, 3]), 3)\n *\n * @category destructors\n * @since 2.10.0\n */\n\nexport var matchLeft = matchLeftW;\n/**\n * Alias of [`matchLeft`](#matchleft).\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexport var foldLeft = matchLeft;\n/**\n * Less strict version of [`matchRight`](#matchright). It will work when `onEmpty` and\n * `onNonEmpty` have different return types.\n *\n * @example\n * import { matchRightW } from 'fp-ts/Array'\n *\n * const f = matchRightW(\n *   () => 0,\n *   (head: string[], tail: string) => `Found ${head.length} elements folllowed by \"${tail}\"`\n * );\n * assert.strictEqual(f([\"a\", \"b\", \"c\"]), 'Found 2 elements folllowed by \"c\"');\n * assert.strictEqual(f([]), 0);\n *\n * @category destructors\n * @since 2.11.0\n */\n\nexport var matchRightW = function matchRightW(onEmpty, onNonEmpty) {\n  return function (as) {\n    return isNonEmpty(as) ? onNonEmpty(NEA.init(as), NEA.last(as)) : onEmpty();\n  };\n};\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` broken  into its initial elements and the last element.\n *\n * @example\n * import { matchRight } from 'fp-ts/Array'\n *\n * const len: <A>(as: Array<A>) => number = matchRight(\n *   () => 0,\n *   (head, _) => 1 + len(head)\n * );\n * assert.strictEqual(len([1, 2, 3]), 3);\n *\n * @category destructors\n * @since 2.10.0\n */\n\nexport var matchRight = matchRightW;\n/**\n * Alias of [`matchRight`](#matchright).\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexport var foldRight = matchRight; // -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n\n/**\n * Same as [`chain`](#chain), but passing also the index to the iterating function.\n *\n * @example\n * import { chainWithIndex, replicate } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (index: number, x: string) => replicate(2, `${x}${index}`);\n * assert.deepStrictEqual(pipe([\"a\", \"b\", \"c\"], chainWithIndex(f)), [\"a0\", \"a0\", \"b1\", \"b1\", \"c2\", \"c2\"]);\n *\n * @category combinators\n * @since 2.7.0\n */\n\nexport var chainWithIndex = function chainWithIndex(f) {\n  return function (as) {\n    var out = [];\n\n    for (var i = 0; i < as.length; i++) {\n      out.push.apply(out, f(i, as[i]));\n    }\n\n    return out;\n  };\n};\n/**\n * Same as `reduce` but it carries over the intermediate steps\n *\n * @example\n * import { scanLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var scanLeft = function scanLeft(b, f) {\n  return function (as) {\n    var len = as.length;\n    var out = new Array(len + 1);\n    out[0] = b;\n\n    for (var i = 0; i < len; i++) {\n      out[i + 1] = f(out[i], as[i]);\n    }\n\n    return out;\n  };\n};\n/**\n * Fold an array from the right, keeping all intermediate results instead of only the final result\n *\n * @example\n * import { scanRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var scanRight = function scanRight(b, f) {\n  return function (as) {\n    var len = as.length;\n    var out = new Array(len + 1);\n    out[len] = b;\n\n    for (var i = len - 1; i >= 0; i--) {\n      out[i] = f(as[i], out[i + 1]);\n    }\n\n    return out;\n  };\n};\n/**\n * Calculate the number of elements in a `Array`.\n *\n * @example\n * import { size } from 'fp-ts/Array'\n *\n * assert.strictEqual(size([\"a\",\"b\",\"c\"]),3)\n *\n * @since 2.10.0\n */\n\nexport var size = function size(as) {\n  return as.length;\n};\n/**\n * Test whether an array contains a particular index\n *\n * @example\n * import { isOutOfBound } from 'fp-ts/Array'\n *\n * assert.strictEqual(isOutOfBound(1,[\"a\",\"b\",\"c\"]),false)\n * assert.strictEqual(isOutOfBound(-1,[\"a\",\"b\",\"c\"]),true)\n * assert.strictEqual(isOutOfBound(3,[\"a\",\"b\",\"c\"]),true)\n *\n * @since 2.0.0\n */\n\nexport var isOutOfBound = NEA.isOutOfBound; // TODO: remove non-curried overloading in v3\n\n/**\n * This function provides a safe way to read a value at a particular index from an array.\n * It returns a `none` if the index is out of bounds, and a `some` of the element if the\n * index is valid.\n *\n * @example\n * import { lookup } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(1)), some(2))\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(3)), none)\n *\n * @since 2.0.0\n */\n\nexport var lookup = RA.lookup;\n/**\n * Get the first element in an array, or `None` if the array is empty\n *\n * @example\n * import { head } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(head([1, 2, 3]), some(1))\n * assert.deepStrictEqual(head([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexport var head = RA.head;\n/**\n * Get the last element in an array, or `None` if the array is empty\n *\n * @example\n * import { last } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(last([1, 2, 3]), some(3))\n * assert.deepStrictEqual(last([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexport var last = RA.last;\n/**\n * Get all but the first element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { tail } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(tail([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexport var tail = function tail(as) {\n  return isNonEmpty(as) ? _.some(NEA.tail(as)) : _.none;\n};\n/**\n * Get all but the last element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { init } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))\n * assert.deepStrictEqual(init([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexport var init = function init(as) {\n  return isNonEmpty(as) ? _.some(NEA.init(as)) : _.none;\n};\n/**\n * Keep only a max number of elements from the start of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { takeLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeLeft(2)([1, 2, 3, 4, 5]), [1, 2]);\n * assert.deepStrictEqual(takeLeft(7)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n * assert.deepStrictEqual(takeLeft(0)([1, 2, 3, 4, 5]), []);\n * assert.deepStrictEqual(takeLeft(-1)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var takeLeft = function takeLeft(n) {\n  return function (as) {\n    return isOutOfBound(n, as) ? copy(as) : as.slice(0, n);\n  };\n};\n/**\n * Keep only a max number of elements from the end of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { takeRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeRight(2)([1, 2, 3, 4, 5]), [4, 5]);\n * assert.deepStrictEqual(takeRight(7)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n * assert.deepStrictEqual(takeRight(0)([1, 2, 3, 4, 5]), []);\n * assert.deepStrictEqual(takeRight(-1)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var takeRight = function takeRight(n) {\n  return function (as) {\n    return isOutOfBound(n, as) ? copy(as) : n === 0 ? [] : as.slice(-n);\n  };\n};\nexport function takeLeftWhile(predicate) {\n  return function (as) {\n    var out = [];\n\n    for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n      var a = as_1[_i];\n\n      if (!predicate(a)) {\n        break;\n      }\n\n      out.push(a);\n    }\n\n    return out;\n  };\n}\n\nvar spanLeftIndex = function spanLeftIndex(as, predicate) {\n  var l = as.length;\n  var i = 0;\n\n  for (; i < l; i++) {\n    if (!predicate(as[i])) {\n      break;\n    }\n  }\n\n  return i;\n};\n\nexport function spanLeft(predicate) {\n  return function (as) {\n    var _a = splitAt(spanLeftIndex(as, predicate))(as),\n        init = _a[0],\n        rest = _a[1];\n\n    return {\n      init: init,\n      rest: rest\n    };\n  };\n}\n/**\n * Creates a new `Array` which is a copy of the input dropping a max number of elements from the start.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { dropLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropLeft(2)([1, 2, 3]), [3]);\n * assert.deepStrictEqual(dropLeft(5)([1, 2, 3]), []);\n * assert.deepStrictEqual(dropLeft(0)([1, 2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(dropLeft(-2)([1, 2, 3]), [1, 2, 3]);\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var dropLeft = function dropLeft(n) {\n  return function (as) {\n    return n <= 0 || isEmpty(as) ? copy(as) : n >= as.length ? [] : as.slice(n, as.length);\n  };\n};\n/**\n * Creates a new `Array` which is a copy of the input dropping a max number of elements from the end.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { dropRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropRight(2)([1, 2, 3]), [1]);\n * assert.deepStrictEqual(dropRight(5)([1, 2, 3]), []);\n * assert.deepStrictEqual(dropRight(0)([1, 2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(dropRight(-2)([1, 2, 3]), [1, 2, 3]);\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var dropRight = function dropRight(n) {\n  return function (as) {\n    return n <= 0 || isEmpty(as) ? copy(as) : n >= as.length ? [] : as.slice(0, as.length - n);\n  };\n};\nexport function dropLeftWhile(predicate) {\n  return function (as) {\n    return as.slice(spanLeftIndex(as, predicate));\n  };\n}\n/**\n * `findIndex` returns an `Option` containing the first index for which a predicate holds.\n * It returns `None` if no element satisfies the predicate.\n * Similar to [`findFirst`](#findFirst) but returning the index instead of the element.\n *\n * @example\n * import { findIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)\n *\n * @since 2.0.0\n */\n\nexport var findIndex = RA.findIndex;\nexport function findFirst(predicate) {\n  return RA.findFirst(predicate);\n}\n/**\n * Given a selector function which takes an element and returns an option,\n * this function applies the selector to each element of the array and\n * returns the first `Some` result. Otherwise it returns `None`.\n *\n * @example\n * import { findFirstMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string;\n *   readonly age: number;\n * }\n *\n * const persons: Array<Person> = [\n *   { name: \"John\", age: 16 },\n *   { name: \"Mary\", age: 45 },\n *   { name: \"Joey\", age: 28 },\n * ];\n *\n * const nameOfPersonAbove18 = (p: Person) => (p.age <= 18 ? none : some(p.name));\n * const nameOfPersonAbove70 = (p: Person) => (p.age <= 70 ? none : some(p.name));\n * assert.deepStrictEqual(findFirstMap(nameOfPersonAbove18)(persons), some(\"Mary\"));\n * assert.deepStrictEqual(findFirstMap(nameOfPersonAbove70)(persons), none);\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexport var findFirstMap = RA.findFirstMap;\nexport function findLast(predicate) {\n  return RA.findLast(predicate);\n}\n/**\n * Given a selector function which takes an element and returns an option,\n * this function applies the selector to each element of the array starting from the\n * end and returns the last `Some` result. Otherwise it returns `None`.\n *\n * @example\n * import { findLastMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string;\n *   readonly age: number;\n * }\n *\n * const persons: Array<Person> = [\n *   { name: \"John\", age: 16 },\n *   { name: \"Mary\", age: 45 },\n *   { name: \"Joey\", age: 28 },\n * ];\n *\n * const nameOfPersonAbove18 = (p: Person) => (p.age <= 18 ? none : some(p.name));\n * const nameOfPersonAbove70 = (p: Person) => (p.age <= 70 ? none : some(p.name));\n * assert.deepStrictEqual(findLastMap(nameOfPersonAbove18)(persons), some(\"Joey\"));\n * assert.deepStrictEqual(findLastMap(nameOfPersonAbove70)(persons), none);\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexport var findLastMap = RA.findLastMap;\n/**\n * Returns the index of the last element of the list which matches the predicate.\n * It returns an `Option` containing the index or `None` if not found.\n *\n * @example\n * import { findLastIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface X {\n *   readonly a: number\n *   readonly b: number\n * }\n * const xs: Array<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 1)(xs), some(1))\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 4)(xs), none)\n *\n * @since 2.0.0\n */\n\nexport var findLastIndex = RA.findLastIndex;\n/**\n * This function takes an array and makes a new array containing the same elements.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var copy = function copy(as) {\n  return as.slice();\n};\n/**\n * Insert an element at the specified index, creating a new array,\n * or returning `None` if the index is out of bounds.\n *\n * @example\n * import { insertAt } from 'fp-ts/Array'\n * import { some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))\n *\n * @since 2.0.0\n */\n\nexport var insertAt = function insertAt(i, a) {\n  return function (as) {\n    return i < 0 || i > as.length ? _.none : _.some(unsafeInsertAt(i, a, as));\n  };\n};\n/**\n * Change the element at the specified index, creating a new array,\n * or returning `None` if the index is out of bounds.\n *\n * @example\n * import { updateAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))\n * assert.deepStrictEqual(updateAt(1, 1)([]), none)\n *\n * @since 2.0.0\n */\n\nexport var updateAt = function updateAt(i, a) {\n  return modifyAt(i, function () {\n    return a;\n  });\n};\n/**\n * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds.\n *\n * @example\n * import { deleteAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(deleteAt(1)([]), none)\n *\n * @since 2.0.0\n */\n\nexport var deleteAt = function deleteAt(i) {\n  return function (as) {\n    return isOutOfBound(i, as) ? _.none : _.some(unsafeDeleteAt(i, as));\n  };\n};\n/**\n * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out\n * of bounds.\n *\n * @example\n * import { modifyAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * const double = (x: number): number => x * 2\n * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))\n * assert.deepStrictEqual(modifyAt(1, double)([]), none)\n *\n * @since 2.0.0\n */\n\nexport var modifyAt = function modifyAt(i, f) {\n  return function (as) {\n    return isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as));\n  };\n};\n/**\n * Reverse an array, creating a new array\n *\n * @example\n * import { reverse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var reverse = function reverse(as) {\n  return isEmpty(as) ? [] : as.slice().reverse();\n};\n/**\n * Takes an `Array` of `Either` and produces a new `Array` containing\n * the values of all the `Right` elements in the same order.\n *\n * @example\n * import { rights } from 'fp-ts/Array'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var rights = function rights(as) {\n  var r = [];\n\n  for (var i = 0; i < as.length; i++) {\n    var a = as[i];\n\n    if (a._tag === 'Right') {\n      r.push(a.right);\n    }\n  }\n\n  return r;\n};\n/**\n * Takes an `Array` of `Either` and produces a new `Array` containing\n * the values of all the `Left` elements in the same order.\n *\n * @example\n * import { lefts } from 'fp-ts/Array'\n * import { left, right } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var lefts = function lefts(as) {\n  var r = [];\n\n  for (var i = 0; i < as.length; i++) {\n    var a = as[i];\n\n    if (a._tag === 'Left') {\n      r.push(a.left);\n    }\n  }\n\n  return r;\n};\n/**\n * Sort the elements of an array in increasing order, creating a new array\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(sort(N.Ord)([3, 2, 1]), [1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var sort = function sort(O) {\n  return function (as) {\n    return as.length <= 1 ? copy(as) : as.slice().sort(O.compare);\n  };\n};\n/**\n * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one\n * input array is short, excess elements of the longer array are discarded.\n *\n * @example\n * import { zipWith } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var zipWith = function zipWith(fa, fb, f) {\n  var fc = [];\n  var len = Math.min(fa.length, fb.length);\n\n  for (var i = 0; i < len; i++) {\n    fc[i] = f(fa[i], fb[i]);\n  }\n\n  return fc;\n};\nexport function zip(as, bs) {\n  if (bs === undefined) {\n    return function (bs) {\n      return zip(bs, as);\n    };\n  }\n\n  return zipWith(as, bs, function (a, b) {\n    return [a, b];\n  });\n}\n/**\n * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays\n *\n * @example\n * import { unzip } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.0.0\n */\n\nexport var unzip = function unzip(as) {\n  var fa = [];\n  var fb = [];\n\n  for (var i = 0; i < as.length; i++) {\n    fa[i] = as[i][0];\n    fb[i] = as[i][1];\n  }\n\n  return [fa, fb];\n};\n/**\n * Creates a new `Array`, prepending an element to every member of the input `Array`.\n *\n * @example\n * import { prependAll } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var prependAll = function prependAll(middle) {\n  var f = NEA.prependAll(middle);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : [];\n  };\n};\n/**\n * Creates a new `Array` placing an element in between members of the input `Array`.\n *\n * @example\n * import { intersperse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.9.0\n */\n\nexport var intersperse = function intersperse(middle) {\n  var f = NEA.intersperse(middle);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : copy(as);\n  };\n};\n/**\n * Creates a new `Array` rotating the input `Array` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var rotate = function rotate(n) {\n  var f = NEA.rotate(n);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : copy(as);\n  };\n}; // TODO: remove non-curried overloading in v3\n\n/**\n * Test if a value is a member of an `Array`. Takes a `Eq<A>` as a single\n * argument which returns the function to use to search for a value of type `A` in\n * an `Array<A>`.\n *\n * @example\n * import { elem } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(2)), true)\n * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(0)), false)\n *\n * @since 2.0.0\n */\n\nexport var elem = RA.elem;\n/**\n * Creates a new `Array` removing duplicate elements, keeping the first occurrence of an element,\n * based on a `Eq<A>`.\n *\n * @example\n * import { uniq } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var uniq = function uniq(E) {\n  var f = NEA.uniq(E);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : copy(as);\n  };\n};\n/**\n * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import { sortBy } from 'fp-ts/Array'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age: number\n * }\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = sortBy([byName, byAge])\n *\n * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var sortBy = function sortBy(ords) {\n  var f = NEA.sortBy(ords);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : copy(as);\n  };\n};\n/**\n * A useful recursion pattern for processing an array to produce a new array, often used for \"chopping\" up the input\n * array. Typically chop is called with some function that will consume an initial prefix of the array and produce a\n * value and the rest of the array.\n *\n * @example\n * import { Eq } from 'fp-ts/Eq'\n * import * as A from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * const group = <A>(S: Eq<A>): ((as: Array<A>) => Array<Array<A>>) => {\n *   return A.chop(as => {\n *     const { init, rest } = pipe(as, A.spanLeft((a: A) => S.equals(a, as[0])))\n *     return [init, rest]\n *   })\n * }\n * assert.deepStrictEqual(group(N.Eq)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var chop = function chop(f) {\n  var g = NEA.chop(f);\n  return function (as) {\n    return isNonEmpty(as) ? g(as) : [];\n  };\n};\n/**\n * Splits an `Array` into two pieces, the first piece has max `n` elements.\n *\n * @example\n * import { splitAt } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var splitAt = function splitAt(n) {\n  return function (as) {\n    return n >= 1 && isNonEmpty(as) ? NEA.splitAt(n)(as) : isEmpty(as) ? [copy(as), []] : [[], copy(as)];\n  };\n};\n/**\n * Splits an array into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the array. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `xs`.\n *\n * @example\n * import { chunksOf } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var chunksOf = function chunksOf(n) {\n  var f = NEA.chunksOf(n);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : [];\n  };\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\n\nexport var fromOptionK = function fromOptionK(f) {\n  return function () {\n    var a = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      a[_i] = arguments[_i];\n    }\n\n    return fromOption(f.apply(void 0, a));\n  };\n};\nexport function comprehension(input, f, g) {\n  if (g === void 0) {\n    g = function g() {\n      return true;\n    };\n  }\n\n  var go = function go(scope, input) {\n    return isNonEmpty(input) ? pipe(NEA.head(input), chain(function (x) {\n      return go(pipe(scope, append(x)), NEA.tail(input));\n    })) : g.apply(void 0, scope) ? [f.apply(void 0, scope)] : [];\n  };\n\n  return go([], input);\n}\n/**\n * @category combinators\n * @since 2.11.0\n */\n\nexport var concatW = function concatW(second) {\n  return function (first) {\n    return isEmpty(first) ? copy(second) : isEmpty(second) ? copy(first) : first.concat(second);\n  };\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\n\nexport var concat = concatW;\nexport function union(E) {\n  var unionE = NEA.union(E);\n  return function (first, second) {\n    if (second === undefined) {\n      var unionE_1 = union(E);\n      return function (second) {\n        return unionE_1(second, first);\n      };\n    }\n\n    return isNonEmpty(first) && isNonEmpty(second) ? unionE(second)(first) : isNonEmpty(first) ? copy(first) : copy(second);\n  };\n}\nexport function intersection(E) {\n  var elemE = elem(E);\n  return function (xs, ys) {\n    if (ys === undefined) {\n      var intersectionE_1 = intersection(E);\n      return function (ys) {\n        return intersectionE_1(ys, xs);\n      };\n    }\n\n    return xs.filter(function (a) {\n      return elemE(a, ys);\n    });\n  };\n}\nexport function difference(E) {\n  var elemE = elem(E);\n  return function (xs, ys) {\n    if (ys === undefined) {\n      var differenceE_1 = difference(E);\n      return function (ys) {\n        return differenceE_1(ys, xs);\n      };\n    }\n\n    return xs.filter(function (a) {\n      return !elemE(a, ys);\n    });\n  };\n} // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\nvar _map = function _map(fa, f) {\n  return pipe(fa, map(f));\n};\n/* istanbul ignore next */\n\n\nvar _mapWithIndex = function _mapWithIndex(fa, f) {\n  return pipe(fa, mapWithIndex(f));\n};\n\nvar _ap = function _ap(fab, fa) {\n  return pipe(fab, ap(fa));\n};\n\nvar _chain = function _chain(ma, f) {\n  return pipe(ma, chain(f));\n};\n/* istanbul ignore next */\n\n\nvar _filter = function _filter(fa, predicate) {\n  return pipe(fa, filter(predicate));\n};\n/* istanbul ignore next */\n\n\nvar _filterMap = function _filterMap(fa, f) {\n  return pipe(fa, filterMap(f));\n};\n/* istanbul ignore next */\n\n\nvar _partition = function _partition(fa, predicate) {\n  return pipe(fa, partition(predicate));\n};\n/* istanbul ignore next */\n\n\nvar _partitionMap = function _partitionMap(fa, f) {\n  return pipe(fa, partitionMap(f));\n};\n/* istanbul ignore next */\n\n\nvar _partitionWithIndex = function _partitionWithIndex(fa, predicateWithIndex) {\n  return pipe(fa, partitionWithIndex(predicateWithIndex));\n};\n/* istanbul ignore next */\n\n\nvar _partitionMapWithIndex = function _partitionMapWithIndex(fa, f) {\n  return pipe(fa, partitionMapWithIndex(f));\n};\n/* istanbul ignore next */\n\n\nvar _alt = function _alt(fa, that) {\n  return pipe(fa, alt(that));\n};\n\nvar _reduce = function _reduce(fa, b, f) {\n  return pipe(fa, reduce(b, f));\n};\n/* istanbul ignore next */\n\n\nvar _foldMap = function _foldMap(M) {\n  var foldMapM = foldMap(M);\n  return function (fa, f) {\n    return pipe(fa, foldMapM(f));\n  };\n};\n/* istanbul ignore next */\n\n\nvar _reduceRight = function _reduceRight(fa, b, f) {\n  return pipe(fa, reduceRight(b, f));\n};\n/* istanbul ignore next */\n\n\nvar _reduceWithIndex = function _reduceWithIndex(fa, b, f) {\n  return pipe(fa, reduceWithIndex(b, f));\n};\n/* istanbul ignore next */\n\n\nvar _foldMapWithIndex = function _foldMapWithIndex(M) {\n  var foldMapWithIndexM = foldMapWithIndex(M);\n  return function (fa, f) {\n    return pipe(fa, foldMapWithIndexM(f));\n  };\n};\n/* istanbul ignore next */\n\n\nvar _reduceRightWithIndex = function _reduceRightWithIndex(fa, b, f) {\n  return pipe(fa, reduceRightWithIndex(b, f));\n};\n/* istanbul ignore next */\n\n\nvar _filterMapWithIndex = function _filterMapWithIndex(fa, f) {\n  return pipe(fa, filterMapWithIndex(f));\n};\n/* istanbul ignore next */\n\n\nvar _filterWithIndex = function _filterWithIndex(fa, predicateWithIndex) {\n  return pipe(fa, filterWithIndex(predicateWithIndex));\n};\n/* istanbul ignore next */\n\n\nvar _extend = function _extend(fa, f) {\n  return pipe(fa, extend(f));\n};\n/* istanbul ignore next */\n\n\nvar _traverse = function _traverse(F) {\n  var traverseF = traverse(F);\n  return function (ta, f) {\n    return pipe(ta, traverseF(f));\n  };\n};\n/* istanbul ignore next */\n\n\nvar _traverseWithIndex = function _traverseWithIndex(F) {\n  var traverseWithIndexF = traverseWithIndex(F);\n  return function (ta, f) {\n    return pipe(ta, traverseWithIndexF(f));\n  };\n};\n\nvar _chainRecDepthFirst = RA._chainRecDepthFirst;\nvar _chainRecBreadthFirst = RA._chainRecBreadthFirst; // -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n\n/**\n * Given an element of the base type, `of` builds an `Array` containing just that\n * element of the base type (this is useful for building a `Monad`).\n *\n * @example\n * import { of } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(of(\"a\"), [\"a\"]);\n *\n * @category Pointed\n * @since 2.0.0\n */\n\nexport var of = NEA.of;\n/**\n * Makes an empty `Array`, useful for building a [`Monoid`](#Monoid)\n *\n * @category Zero\n * @since 2.7.0\n */\n\nexport var zero = function zero() {\n  return [];\n};\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: Array<A>) => Array<B>`.\n * In practice it applies the base function to each element of the array and collects the\n * results in a new array.\n *\n * @example\n * import { map } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (n: number) => n * 2;\n * assert.deepStrictEqual(pipe([1, 2, 3], map(f)), [2, 4, 6]);\n *\n * @category Functor\n * @since 2.0.0\n */\n\nexport var map = function map(f) {\n  return function (fa) {\n    return fa.map(function (a) {\n      return f(a);\n    });\n  };\n};\n/**\n * Apply a function to an argument under a type constructor.\n *\n * It can be used to extend the concept of [`map`](#map) to a function that\n * takes more than one parameter as described\n * read [here](https://dev.to/gcanti/getting-started-with-fp-ts-applicative-1kb3)\n *\n * @example\n * import { ap, map, of } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * // a curried function with 3 input parameteres\n * const f = (s1: string) => (n: number) => (s2: string) => s1 + n + s2;\n *\n * // let's use `ap` to iterate `f` over an array for each input parameter\n * assert.deepStrictEqual(pipe([\"a\", \"b\"], map(f), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"])), [\n *   \"a1😀\", \"a1😫\", \"a1😎\",\n *   \"a2😀\", \"a2😫\", \"a2😎\",\n *   \"b1😀\", \"b1😫\", \"b1😎\",\n *   \"b2😀\", \"b2😫\", \"b2😎\",\n * ]);\n *\n * // given Array implements the Applicative interface with the `of` method,\n * // we can write exactly the same thing in a more symmetric way\n * // using `of` on `f` and `ap` on each array in input\n * assert.deepStrictEqual(\n *   pipe(of(f), ap([\"a\", \"b\"]), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"])),\n *   pipe([\"a\", \"b\"], map(f), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"]))\n * );\n *\n * @category Apply\n * @since 2.0.0\n */\n\nexport var ap = function ap(fa) {\n  return chain(function (f) {\n    return pipe(fa, map(f));\n  });\n};\n/**\n * Composes computations in sequence, using the return value of one computation to\n * determine the next computation.\n *\n * In other words it takes a function `f` that produces an array from a single element of\n * the base type `A` and returns a new function which applies `f` to each element of the\n * input array (like [`map`](#map)) and, instead of returning an array of arrays, concatenates the\n * results into a single array (like [`flatten`](#flatten)).\n *\n * This is the `chain` component of the array `Monad`.\n *\n * @example\n * import { chain, map, replicate } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (n: number) => replicate(n, `${n}`);\n * assert.deepStrictEqual(pipe([1, 2, 3], map(f)), [[\"1\"], [\"2\", \"2\"], [\"3\", \"3\", \"3\"]]);\n * assert.deepStrictEqual(pipe([1, 2, 3], chain(f)), [\"1\", \"2\", \"2\", \"3\", \"3\", \"3\"]);\n *\n * @category Monad\n * @since 2.0.0\n */\n\nexport var chain = function chain(f) {\n  return function (ma) {\n    return pipe(ma, chainWithIndex(function (_, a) {\n      return f(a);\n    }));\n  };\n};\n/**\n * Takes an array of arrays of `A` and flattens them into an array of `A`\n * by concatenating the elements of each array in order.\n *\n * Derivable from [`chain`](#chain).\n *\n * @example\n * import { flatten } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(flatten([[\"a\"], [\"b\", \"c\"], [\"d\", \"e\", \"f\"]]), [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]);\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var flatten = /*#__PURE__*/chain(identity);\n/**\n * Same as [`map`](#map), but the iterating function takes both the index and the value\n * of the element.\n *\n * @example\n * import { mapWithIndex } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (i: number, s: string) => `${s} - ${i}`;\n * assert.deepStrictEqual(pipe([\"a\", \"b\", \"c\"], mapWithIndex(f)), [\"a - 0\", \"b - 1\", \"c - 2\"]);\n *\n * @category FunctorWithIndex\n * @since 2.0.0\n */\n\nexport var mapWithIndex = function mapWithIndex(f) {\n  return function (fa) {\n    return fa.map(function (a, i) {\n      return f(i, a);\n    });\n  };\n};\n/**\n * Maps an array with an iterating function that takes the index and the value of\n * each element and returns an `Option`. It keeps only the `Some` values discarding\n * the `None`s.\n *\n * Same as [`filterMap`](#filterMap), but with an iterating function which takes also\n * the index as input.\n *\n * @example\n * import { filterMapWithIndex } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n * import { option } from \"fp-ts\";\n *\n * const f = (i: number, s: string) => (i % 2 === 1 ? option.some(s.toUpperCase()) : option.none);\n * assert.deepStrictEqual(pipe([\"a\", \"no\", \"neither\", \"b\"], filterMapWithIndex(f)), [\"NO\", \"B\"]);\n *\n * @category FilterableWithIndex\n * @since 2.0.0\n */\n\nexport var filterMapWithIndex = function filterMapWithIndex(f) {\n  return function (fa) {\n    var out = [];\n\n    for (var i = 0; i < fa.length; i++) {\n      var optionB = f(i, fa[i]);\n\n      if (_.isSome(optionB)) {\n        out.push(optionB.value);\n      }\n    }\n\n    return out;\n  };\n};\n/**\n * Maps an array with an iterating function that returns an `Option`\n * and it keeps only the `Some` values discarding the `None`s.\n *\n * @example\n * import { filterMap } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n * import { option } from \"fp-ts\";\n *\n * const f = (s: string) => s.length === 1 ? option.some(s.toUpperCase()) : option.none;\n * assert.deepStrictEqual(pipe([\"a\", \"no\", \"neither\", \"b\"], filterMap(f)), [\"A\", \"B\"]);\n *\n * @category Filterable\n * @since 2.0.0\n */\n\nexport var filterMap = function filterMap(f) {\n  return filterMapWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * Compact an array of `Option`s discarding the `None` values and\n * keeping the `Some` values. It returns a new array containing the values of\n * the `Some` options.\n *\n * @example\n * import { compact } from 'fp-ts/Array'\n * import { option } from \"fp-ts\";\n *\n * assert.deepStrictEqual(compact([option.some(\"a\"), option.none, option.some(\"b\")]), [\"a\", \"b\"]);\n *\n * @category Compactable\n * @since 2.0.0\n */\n\nexport var compact = /*#__PURE__*/filterMap(identity);\n/**\n * Separate an array of `Either`s into `Left`s and `Right`s, creating two new arrays:\n * one containing all the left values and one containing all the right values.\n *\n * @example\n * import { separate } from 'fp-ts/Array'\n * import { either } from \"fp-ts\";\n *\n * assert.deepStrictEqual(separate([either.right(\"r1\"), either.left(\"l1\"), either.right(\"r2\")]), {\n *   left: [\"l1\"],\n *   right: [\"r1\", \"r2\"],\n * });\n *\n * @category Compactable\n * @since 2.0.0\n */\n\nexport var separate = function separate(fa) {\n  var left = [];\n  var right = [];\n\n  for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {\n    var e = fa_1[_i];\n\n    if (e._tag === 'Left') {\n      left.push(e.left);\n    } else {\n      right.push(e.right);\n    }\n  }\n\n  return separated(left, right);\n};\n/**\n * Given an iterating function that is a `Predicate` or a `Refinement`,\n * `filter` creates a new `Array` containing the elements of the original\n * `Array` for which the iterating function is `true`.\n *\n * @example\n * import { filter } from 'fp-ts/Array'\n * import { isString } from \"fp-ts/lib/string\";\n *\n * assert.deepStrictEqual(filter(isString)([\"a\", 1, {}, \"b\", 5]), [\"a\", \"b\"]);\n * assert.deepStrictEqual(filter((x:number) => x > 0)([-3, 1, -2, 5]), [1, 5]);\n *\n * @category Filterable\n * @since 2.0.0\n */\n\nexport var filter = function filter(predicate) {\n  return function (as) {\n    return as.filter(predicate);\n  };\n};\n/**\n * Given an iterating function that is a `Predicate` or a `Refinement`,\n * `partition` creates two new `Array`s: `right` containing the elements of the original\n * `Array` for which the iterating function is `true`, `left` containing the elements\n * for which it is false.\n *\n * @example\n * import { partition } from 'fp-ts/Array'\n * import { isString } from \"fp-ts/lib/string\";\n *\n * assert.deepStrictEqual(partition(isString)([\"a\", 1, {}, \"b\", 5]), { left: [1, {}, 5], right: [\"a\", \"b\"] });\n * assert.deepStrictEqual(partition((x: number) => x > 0)([-3, 1, -2, 5]), { left: [-3, -2], right: [1, 5] });\n *\n * @category Filterable\n * @since 2.0.0\n */\n\nexport var partition = function partition(predicate) {\n  return partitionWithIndex(function (_, a) {\n    return predicate(a);\n  });\n};\n/**\n * Same as [`partition`](#partition), but passing also the index to the iterating function.\n *\n * @example\n * import { partitionWithIndex } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(partitionWithIndex((index, x: number) => index < 3 && x > 0)([-2, 5, 6, 7]), {\n *   left: [-2, 7],\n *   right: [5, 6],\n * });\n *\n * @category FilterableWithIndex\n * @since 2.0.0\n */\n\nexport var partitionWithIndex = function partitionWithIndex(predicateWithIndex) {\n  return function (as) {\n    var left = [];\n    var right = [];\n\n    for (var i = 0; i < as.length; i++) {\n      var b = as[i];\n\n      if (predicateWithIndex(i, b)) {\n        right.push(b);\n      } else {\n        left.push(b);\n      }\n    }\n\n    return separated(left, right);\n  };\n};\n/**\n * Given an iterating function that returns an `Either`,\n * `partitionMap` applies the iterating function to each element and it creates two `Array`s:\n * `right` containing the values of `Right` results, `left` containing the values of `Left` results.\n *\n * @example\n * import { partitionMap } from 'fp-ts/Array'\n * import { Either, left, right } from \"fp-ts/lib/Either\";\n *\n * const upperIfString = <B>(x: B): Either<B, string> =>\n *   typeof x === \"string\" ? right(x.toUpperCase()) : left(x);\n * assert.deepStrictEqual(partitionMap(upperIfString)([-2, \"hello\", 6, 7, \"world\"]), {\n *   left: [-2, 6, 7],\n *   right: [ 'HELLO', 'WORLD' ],\n * });\n *\n * @category Filterable\n * @since 2.0.0\n */\n\nexport var partitionMap = function partitionMap(f) {\n  return partitionMapWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * Same as [`partitionMap`](#partitionMap), but passing also the index to the iterating function.\n *\n * @example\n * import { partitionMapWithIndex } from 'fp-ts/Array'\n * import { Either, left, right } from \"fp-ts/lib/Either\";\n *\n * const upperIfStringBefore3 = <B>(index: number, x: B): Either<B, string> =>\n *   index < 3 && typeof x === \"string\" ? right(x.toUpperCase()) : left(x);\n * assert.deepStrictEqual(partitionMapWithIndex(upperIfStringBefore3)([-2, \"hello\", 6, 7, \"world\"]), {\n *   left: [-2, 6, 7, \"world\"],\n *   right: [\"HELLO\"],\n * });\n *\n * @category FilterableWithIndex\n * @since 2.0.0\n */\n\nexport var partitionMapWithIndex = function partitionMapWithIndex(f) {\n  return function (fa) {\n    var left = [];\n    var right = [];\n\n    for (var i = 0; i < fa.length; i++) {\n      var e = f(i, fa[i]);\n\n      if (e._tag === 'Left') {\n        left.push(e.left);\n      } else {\n        right.push(e.right);\n      }\n    }\n\n    return separated(left, right);\n  };\n};\n/**\n * Less strict version of [`alt`](#alt), it can concatenate `Array`s of different base types.\n *\n * @example\n * import { altW } from 'fp-ts/Array';\n *\n * assert.deepStrictEqual(altW(() => [2, 3, 4])([\"a\"]), [\"a\", 2, 3, 4]);\n *\n * @category Alt\n * @since 2.9.0\n */\n\nexport var altW = function altW(that) {\n  return function (fa) {\n    return fa.concat(that());\n  };\n};\n/**\n * `alt` implements the `Alt` iterface by concatenation of `Array`s.\n * `Alt` interface is similar to `Semigroup` for higher-kinded types such\n * as `Array` and `Option`: the example below shows both `Alt`'s `alt` and\n * `Semigroup`'s `concat` functions.\n *\n * @example\n * import { alt, concat } from 'fp-ts/Array';\n *\n * assert.deepStrictEqual(alt(() => [2, 3, 4])([1]), [1, 2, 3, 4]);\n * assert.deepStrictEqual(concat([2, 3, 4])([1]), [1, 2, 3, 4]);\n *\n * @category Alt\n * @since 2.0.0\n */\n\nexport var alt = altW;\n/**\n * Same as [`filter`](#filter), but passing also the index to the iterating function.\n *\n * @example\n * import { filterWithIndex } from 'fp-ts/Array';\n *\n * const f = (index: number, x: number) => x > 0 && index <= 2;\n * assert.deepStrictEqual(filterWithIndex(f)([-3, 1, -2, 5]), [1]);\n *\n * @category FilterableWithIndex\n * @since 2.0.0\n */\n\nexport var filterWithIndex = function filterWithIndex(predicateWithIndex) {\n  return function (as) {\n    return as.filter(function (b, i) {\n      return predicateWithIndex(i, b);\n    });\n  };\n};\n/**\n * Given an iterating function that takes `Array<A>` as input, `extend` returns\n * an array containing the results of the iterating function applied to the whole input\n * `Array`, then to the input `Array` without the first element, then to the input\n * `Array` without the first two elements, etc.\n *\n * @example\n * import { extend } from 'fp-ts/Array'\n *\n * const f = (a: string[]) => a.join(\",\");\n * assert.deepStrictEqual(extend(f)([\"a\", \"b\", \"c\"]), [\"a,b,c\", \"b,c\", \"c\"]);\n *\n * @category Extend\n * @since 2.0.0\n */\n\nexport var extend = function extend(f) {\n  return function (wa) {\n    return wa.map(function (_, i) {\n      return f(wa.slice(i));\n    });\n  };\n};\n/**\n * `duplicate` returns an array containing the whole input `Array`,\n * then to the input `Array` dropping the first element, then to the input\n * `Array` dropping the first two elements, etc.\n * Derivable from `Extend`.\n *\n * @example\n * import { duplicate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(duplicate([\"a\", \"b\", \"c\"]), [[\"a\", \"b\", \"c\"], [\"b\", \"c\"], [\"c\"]]);\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var duplicate = /*#__PURE__*/extend(identity);\n/**\n * Map and fold an `Array`.\n * Map the `Array` passing each value to the iterating function.\n * Then fold the results using the provided `Monoid`.\n *\n * @example\n * import { foldMap } from 'fp-ts/Array'\n *\n * const monoid = { concat: (a: string, b: string) => a + b, empty: \"\" };\n * const f = (s: string) => s.toUpperCase()\n * assert.deepStrictEqual(foldMap(monoid)(f)([\"a\", \"b\", \"c\"]), \"ABC\");\n *\n * @category Foldable\n * @since 2.0.0\n */\n\nexport var foldMap = RA.foldMap;\n/**\n * Same as [`foldMap`](#foldMap) but passing also the index to the iterating function.\n *\n * @example\n * import { foldMapWithIndex } from 'fp-ts/Array'\n *\n * const monoid = { concat: (a: string, b: string) => a + b, empty: \"\" };\n * const f = (index:number, s: string) => `${s.toUpperCase()}(${index})`\n * assert.deepStrictEqual(foldMapWithIndex(monoid)(f)([\"a\", \"b\", \"c\"]), \"A(0)B(1)C(2)\");\n *\n * @category FoldableWithIndex\n * @since 2.0.0\n */\n\nexport var foldMapWithIndex = RA.foldMapWithIndex;\n/**\n * Reduces an `Array`.\n *\n * `reduce` executes the supplied iterating function on each element of the array,\n * in order, passing in the element and the return value from the calculation on the preceding element.\n *\n * The first time that the iterating function is called there is no \"return value of the\n * previous calculation\", the initial value is used in its place.\n *\n * @example\n * import { reduce } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reduce(5, (acc: number, cur: number) => acc * cur)([2, 3]), 5 * 2 * 3);\n *\n * @category Foldable\n * @since 2.0.0\n */\n\nexport var reduce = RA.reduce;\n/**\n * Same as [`reduce`](#reduce) but passing also the index to the iterating function.\n *\n * @example\n * import { reduceWithIndex } from 'fp-ts/Array'\n *\n * const f = (index: number, acc: string, cur: unknown) =>\n *   acc + (typeof cur === \"string\" ? cur.toUpperCase() + index : \"\");\n * assert.deepStrictEqual(reduceWithIndex(\"\", f)([2, \"a\", \"b\", null]), \"A1B2\");\n *\n * @category FoldableWithIndex\n * @since 2.0.0\n */\n\nexport var reduceWithIndex = RA.reduceWithIndex;\n/**\n * Same as [`reduce`](#reduce) but applied from the end to the start.\n *\n * *Note*: the iterating function in this case takes the accumulator as the last argument.\n *\n * @example\n * import { reduceRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reduceRight(\"\", (cur: string, acc: string) => acc + cur)([\"a\", \"b\", \"c\"]), \"cba\");\n *\n * @category Foldable\n * @since 2.0.0\n */\n\nexport var reduceRight = RA.reduceRight;\n/**\n * Same as [`reduceRight`](#reduceRight) but passing also the index to the iterating function.\n *\n * @example\n * import { reduceRightWithIndex } from 'fp-ts/Array'\n *\n * const f = (index: number, cur: unknown, acc: string) =>\n *   acc + (typeof cur === \"string\" ? cur.toUpperCase() + index : \"\");\n * assert.deepStrictEqual(reduceRightWithIndex(\"\", f)([2, \"a\", \"b\", null]), \"B2A1\");\n *\n * @category FoldableWithIndex\n * @since 2.0.0\n */\n\nexport var reduceRightWithIndex = RA.reduceRightWithIndex;\n/**\n * Given an iterating function that returns a `HKT` (higher kinded type), `traverse`\n * applies the iterating function to each element of the `Array` and then [`sequence`](#sequence)-s\n * the results using the provided `Applicative`.\n *\n * E.g. suppose you have an `Array` and you want to format each element with a function\n * that returns a result or an error as `f = (a: A) => Either<Error, B>`, using `traverse`\n * you can apply `f` to all elements and directly obtain as a result an `Either<Error,Array<B>>`\n * i.e. an `Array<B>` if all the results are `B`, or an `Error` if some of the results\n * are `Error`s.\n *\n * @example\n * import { traverse } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/lib/Either\";\n *\n * const f = (x: unknown) =>\n *   typeof x === \"string\" ? right(x.toUpperCase()) : left(new Error(\"not a string\"));\n * assert.deepStrictEqual(traverse(Applicative)(f)([\"a\", \"b\"]), right([\"A\", \"B\"]));\n * assert.deepStrictEqual(traverse(Applicative)(f)([\"a\", 5]), left(new Error(\"not a string\")));\n *\n * @category Traversable\n * @since 2.6.3\n */\n\nexport var traverse = function traverse(F) {\n  var traverseWithIndexF = traverseWithIndex(F);\n  return function (f) {\n    return traverseWithIndexF(function (_, a) {\n      return f(a);\n    });\n  };\n};\n/**\n * `sequence` takes an `Array` where elements are `HKT<A>` (higher kinded type) and,\n * using an applicative of that `HKT`, returns an `HKT` of `Array<A>`.\n * E.g. it can turn an `Array<Either<Error, string>>` into an `Either<Error, Array<string>>`.\n *\n * `sequence` requires an `Applicative` of the `HKT` you are targeting, e.g. to turn an\n * `Array<Either<E, A>>` into an `Either<E, Array<A>>`, it needs an\n * `Applicative` for `Either`, to to turn an `Array<Option<A>>` into an `Option<Array<A>>`,\n * it needs an `Applicative` for `Option`.\n *\n * @example\n * import { sequence } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/lib/Either\";\n *\n * assert.deepStrictEqual(sequence(Applicative)([right(\"a\"), right(\"b\")]), right([\"a\", \"b\"]));\n * assert.deepStrictEqual(\n *   sequence(Applicative)([right(\"a\"), left(new Error(\"not a string\"))]),\n *   left(new Error(\"not a string\"))\n * );\n *\n * @category Traversable\n * @since 2.6.3\n */\n\nexport var sequence = function sequence(F) {\n  return function (ta) {\n    return _reduce(ta, F.of(zero()), function (fas, fa) {\n      return F.ap(F.map(fas, function (as) {\n        return function (a) {\n          return pipe(as, append(a));\n        };\n      }), fa);\n    });\n  };\n};\n/**\n * Same as [`traverse`](#traverse) but passing also the index to the iterating function.\n *\n * @example\n * import { traverseWithIndex } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/lib/Either\";\n *\n * const f = (index:number, x:unknown) =>\n *   typeof x === \"string\" ? right(x.toUpperCase() + index) : left(new Error(\"not a string\"));\n * assert.deepStrictEqual(traverseWithIndex(Applicative)(f)([\"a\", \"b\"]), right([\"A0\", \"B1\"]));\n * assert.deepStrictEqual(traverseWithIndex(Applicative)(f)([\"a\", 5]), left(new Error(\"not a string\")));\n *\n * @category TraversableWithIndex\n * @since 2.6.3\n */\n\nexport var traverseWithIndex = function traverseWithIndex(F) {\n  return function (f) {\n    return reduceWithIndex(F.of(zero()), function (i, fbs, a) {\n      return F.ap(F.map(fbs, function (bs) {\n        return function (b) {\n          return pipe(bs, append(b));\n        };\n      }), f(i, a));\n    });\n  };\n};\n/**\n * @category Witherable\n * @since 2.6.5\n */\n\nexport var wither = function wither(F) {\n  var _witherF = _wither(F);\n\n  return function (f) {\n    return function (fa) {\n      return _witherF(fa, f);\n    };\n  };\n};\n/**\n * @category Witherable\n * @since 2.6.5\n */\n\nexport var wilt = function wilt(F) {\n  var _wiltF = _wilt(F);\n\n  return function (f) {\n    return function (fa) {\n      return _wiltF(fa, f);\n    };\n  };\n};\n/**\n * `unfold` takes a function `f` which returns an `Option` of a tuple containing an outcome\n * value and an input for the following iteration.\n * `unfold` applies `f` to the initial value `b` and then recursively to the second\n * element of the tuple contained in the returned `option` of the previous\n * calculation until `f` returns `Option.none`.\n *\n * @example\n * import { unfold } from 'fp-ts/Array'\n * import { option } from 'fp-ts'\n *\n * const f = (n: number) => {\n *   if (n <= 0) return option.none;\n *   const returnValue = n * 2;\n *   const inputForNextRound = n - 1;\n *   return option.some([returnValue, inputForNextRound] as const);\n * };\n * assert.deepStrictEqual(unfold(5, f), [10, 8, 6, 4, 2]);\n *\n * @category Unfoldable\n * @since 2.6.6\n */\n\nexport var unfold = function unfold(b, f) {\n  var out = [];\n  var bb = b;\n\n  while (true) {\n    var mt = f(bb);\n\n    if (_.isSome(mt)) {\n      var _a = mt.value,\n          a = _a[0],\n          b_1 = _a[1];\n      out.push(a);\n      bb = b_1;\n    } else {\n      break;\n    }\n  }\n\n  return out;\n}; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var URI = 'Array';\n/**\n * `getShow` makes a `Show` for an `Array<A>` from a `Show` for\n * an `A`.\n *\n * @example\n * import { getShow } from 'fp-ts/Array'\n *\n * const numShow = { show: (n: number) => (n >= 0 ? `${n}` : `(${-n})`) };\n * assert.deepStrictEqual(getShow(numShow).show([-2, -1, 0, 1]), \"[(2), (1), 0, 1]\");\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport var getShow = RA.getShow;\n/**\n * Get a `Semigroup` based on the concatenation of `Array`s.\n * See also [`getMonoid`](#getMonoid).\n *\n * @example\n * import { getSemigroup } from 'fp-ts/Array'\n *\n * const S = getSemigroup<number>();\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1, 2, 2, 3]);\n *\n * @category instances\n * @since 2.10.0\n */\n\nexport var getSemigroup = function getSemigroup() {\n  return {\n    concat: function concat(first, second) {\n      return first.concat(second);\n    }\n  };\n};\n/**\n * Returns a `Monoid` for `Array<A>` based on the concatenation of `Array`s.\n *\n * @example\n * import { getMonoid } from 'fp-ts/Array'\n *\n * const M = getMonoid<number>()\n * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport var getMonoid = function getMonoid() {\n  return {\n    concat: getSemigroup().concat,\n    empty: []\n  };\n};\n/**\n * Derives an `Eq` over the `Array` of a given element type from the `Eq` of that type. The derived `Eq` defines two\n * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of\n * different lengths, the result is non equality.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { getEq } from 'fp-ts/Array'\n *\n * const E = getEq(S.Eq)\n * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)\n * assert.strictEqual(E.equals(['a'], []), false)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport var getEq = RA.getEq;\n/**\n * Derives an `Ord` over the `Array` of a given element type from the `Ord` of that type. The ordering between two such\n * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in\n * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have\n * the same length, the result is equality.\n *\n * @example\n * import { getOrd } from 'fp-ts/Array'\n * import * as S from 'fp-ts/string'\n *\n * const O = getOrd(S.Ord)\n * assert.strictEqual(O.compare(['b'], ['a']), 1)\n * assert.strictEqual(O.compare(['a'], ['a']), 0)\n * assert.strictEqual(O.compare(['a'], ['b']), -1)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport var getOrd = RA.getOrd;\n/**\n * Get a `Semigroup` based on the union of the elements of `Array`s.\n * Elements which equal according to the provided `Eq` are included\n * only once in the result.\n * See also [`getUnionMonoid`](#getUnionMonoid).\n *\n * @example\n * import { getUnionSemigroup } from 'fp-ts/Array';\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getUnionSemigroup<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1, 2, 3]);\n *\n * @category instances\n * @since 2.11.0\n */\n\nexport var getUnionSemigroup = function getUnionSemigroup(E) {\n  var unionE = union(E);\n  return {\n    concat: function concat(first, second) {\n      return unionE(second)(first);\n    }\n  };\n};\n/**\n * Get a `Monoid` based on the union of the elements of `Array`s.\n * Elements which equal according to the provided `Eq` are included\n * only once in the result.\n *\n * @example\n * import { getUnionMonoid } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const M = getUnionMonoid<number>(Eq);\n * assert.deepStrictEqual(M.concat([1, 2], [2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(M.empty,[]);\n *\n * @category instances\n * @since 2.11.0\n */\n\nexport var getUnionMonoid = function getUnionMonoid(E) {\n  return {\n    concat: getUnionSemigroup(E).concat,\n    empty: []\n  };\n};\n/**\n * Get a `Semigroup` based on the intersection of the elements of `Array`s.\n * Only elements present in the two arrays which are equal according to the\n * provided `Eq` are included in the result.\n *\n * @example\n * import { getIntersectionSemigroup } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getIntersectionSemigroup<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [2]);\n *\n * @category instances\n * @since 2.11.0\n */\n\nexport var getIntersectionSemigroup = function getIntersectionSemigroup(E) {\n  var intersectionE = intersection(E);\n  return {\n    concat: function concat(first, second) {\n      return intersectionE(second)(first);\n    }\n  };\n};\n/**\n * Get a `Magma` for `Array` where the `concat` function is the differnce between\n * the first and the second array, i.e. the result contains all the elements of the\n * first array for which their is no equal element in the second array according\n * to the `Eq` provided.\n *\n *\n * @example\n * import { getDifferenceMagma } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getDifferenceMagma<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1]);\n *\n * @category instances\n * @since 2.11.0\n */\n\nexport var getDifferenceMagma = function getDifferenceMagma(E) {\n  var differenceE = difference(E);\n  return {\n    concat: function concat(first, second) {\n      return differenceE(second)(first);\n    }\n  };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Functor = {\n  URI: URI,\n  map: _map\n};\n/**\n * Given an input an `Array` of functions, `flap` returns an `Array` containing\n * the results of applying each function to the given input.\n *\n * @example\n * import { flap } from 'fp-ts/Array'\n *\n * const funs = [\n *   (n: number) => `Double: ${n * 2}`,\n *   (n: number) => `Triple: ${n * 3}`,\n *   (n: number) => `Square: ${n * n}`,\n * ];\n * assert.deepStrictEqual(flap(4)(funs), ['Double: 8', 'Triple: 12', 'Square: 16']);\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var flap = /*#__PURE__*/flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Pointed = {\n  URI: URI,\n  of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var FunctorWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Apply = {\n  URI: URI,\n  map: _map,\n  ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var apFirst = /*#__PURE__*/apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var apSecond = /*#__PURE__*/apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Applicative = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Chain = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var chainFirst = /*#__PURE__*/chainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Monad = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of,\n  chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Unfoldable = {\n  URI: URI,\n  unfold: unfold\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Alt = {\n  URI: URI,\n  map: _map,\n  alt: _alt\n};\n/**\n * @category instances\n * @since 2.11.0\n */\n\nexport var Zero = {\n  URI: URI,\n  zero: zero\n};\n/**\n * @category constructors\n * @since 2.11.0\n */\n\nexport var guard = /*#__PURE__*/guard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Alternative = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of,\n  alt: _alt,\n  zero: zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Extend = {\n  URI: URI,\n  map: _map,\n  extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Compactable = {\n  URI: URI,\n  compact: compact,\n  separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Filterable = {\n  URI: URI,\n  map: _map,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var FilterableWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  partitionMapWithIndex: _partitionMapWithIndex,\n  partitionWithIndex: _partitionWithIndex,\n  filterMapWithIndex: _filterMapWithIndex,\n  filterWithIndex: _filterWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Foldable = {\n  URI: URI,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var FoldableWithIndex = {\n  URI: URI,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Traversable = {\n  URI: URI,\n  map: _map,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var TraversableWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex,\n  traverse: _traverse,\n  sequence: sequence,\n  traverseWithIndex: _traverseWithIndex\n};\n\nvar _wither = /*#__PURE__*/witherDefault(Traversable, Compactable);\n\nvar _wilt = /*#__PURE__*/wiltDefault(Traversable, Compactable);\n/**\n * @category instances\n * @since 2.7.0\n */\n\n\nexport var Witherable = {\n  URI: URI,\n  map: _map,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence,\n  wither: _wither,\n  wilt: _wilt\n};\n/**\n * @category ChainRec\n * @since 2.11.0\n */\n\nexport var chainRecDepthFirst = RA.chainRecDepthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\n\nexport var ChainRecDepthFirst = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain,\n  chainRec: _chainRecDepthFirst\n};\n/**\n * @category ChainRec\n * @since 2.11.0\n */\n\nexport var chainRecBreadthFirst = RA.chainRecBreadthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\n\nexport var ChainRecBreadthFirst = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain,\n  chainRec: _chainRecBreadthFirst\n};\n/**\n * Filter values inside a context.\n *\n * @since 2.11.0\n */\n\nexport var filterE = /*#__PURE__*/filterE_(Witherable);\n/**\n * @category instances\n * @since 2.11.0\n */\n\nexport var FromEither = {\n  URI: URI,\n  fromEither: fromEither\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\n\nexport var fromEitherK = /*#__PURE__*/fromEitherK_(FromEither); // -------------------------------------------------------------------------------------\n// unsafe\n// -------------------------------------------------------------------------------------\n\n/**\n * @category unsafe\n * @since 2.0.0\n */\n\nexport var unsafeInsertAt = NEA.unsafeInsertAt;\n/**\n * @category unsafe\n * @since 2.0.0\n */\n\nexport var unsafeUpdateAt = function unsafeUpdateAt(i, a, as) {\n  return isNonEmpty(as) ? NEA.unsafeUpdateAt(i, a, as) : [];\n};\n/**\n * @category unsafe\n * @since 2.0.0\n */\n\nexport var unsafeDeleteAt = function unsafeDeleteAt(i, as) {\n  var xs = as.slice();\n  xs.splice(i, 1);\n  return xs;\n}; // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * `every` tells if the provided predicate holds true for every element in the `Array`.\n *\n * @example\n * import { every } from 'fp-ts/Array'\n *\n * assert.equal(every((x: number) => x >= 0)([1, 2, 3]), true);\n * assert.equal(every((x: number) => x >= 0)([-1, 2, 3]), false);\n *\n * @since 2.9.0\n */\n\nexport var every = RA.every;\n/**\n * `some` tells if the provided predicate holds true at least for one element in the `Array`.\n *\n * @example\n * import { some } from 'fp-ts/Array'\n *\n * assert.equal(some((x: number) => x >= 0)([1, 2, 3]), true);\n * assert.equal(some((x: number) => x >= 10)([1, 2, 3]), false);\n *\n * @since 2.9.0\n */\n\nexport var some = function some(predicate) {\n  return function (as) {\n    return as.some(predicate);\n  };\n};\n/**\n * Alias of [`some`](#some)\n *\n * @since 2.11.0\n */\n\nexport var exists = some; // -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.9.0\n */\n\nexport var Do = /*#__PURE__*/of(_.emptyRecord);\n/**\n * @since 2.8.0\n */\n\nexport var bindTo = /*#__PURE__*/bindTo_(Functor);\n/**\n * @since 2.8.0\n */\n\nexport var bind = /*#__PURE__*/bind_(Chain); // -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.8.0\n */\n\nexport var apS = /*#__PURE__*/apS_(Apply); // -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n// tslint:disable: deprecation\n\n/**\n * Use `NonEmptyArray` module instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\n\nexport var range = NEA.range;\n/**\n * Use a new `[]` instead.\n *\n * @since 2.0.0\n * @deprecated\n */\n\nexport var empty = [];\n/**\n * Use `prepend` instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\n\nexport var cons = NEA.cons;\n/**\n * Use `append` instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\n\nexport var snoc = NEA.snoc;\n/**\n * Use `prependAll` instead\n *\n * @category combinators\n * @since 2.9.0\n * @deprecated\n */\n\nexport var prependToAll = prependAll;\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var array = {\n  URI: URI,\n  compact: compact,\n  separate: separate,\n  map: _map,\n  ap: _ap,\n  of: of,\n  chain: _chain,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  mapWithIndex: _mapWithIndex,\n  partitionMapWithIndex: _partitionMapWithIndex,\n  partitionWithIndex: _partitionWithIndex,\n  filterMapWithIndex: _filterMapWithIndex,\n  filterWithIndex: _filterWithIndex,\n  alt: _alt,\n  zero: zero,\n  unfold: unfold,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex,\n  traverseWithIndex: _traverseWithIndex,\n  extend: _extend,\n  wither: _wither,\n  wilt: _wilt\n};","import { pipe } from './function'; // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * @category constructors\n * @since 2.0.0\n */\n\nexport var fromEquals = function fromEquals(_equals) {\n  return {\n    equals: function equals(x, y) {\n      return x === y || _equals(x, y);\n    }\n  };\n}; // -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n\n/**\n * @category combinators\n * @since 2.10.0\n */\n\nexport var struct = function struct(eqs) {\n  return fromEquals(function (first, second) {\n    for (var key in eqs) {\n      if (!eqs[key].equals(first[key], second[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n};\n/**\n * Given a tuple of `Eq`s returns a `Eq` for the tuple\n *\n * @example\n * import { tuple } from 'fp-ts/Eq'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import * as B from 'fp-ts/boolean'\n *\n * const E = tuple(S.Eq, N.Eq, B.Eq)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, true]), true)\n * assert.strictEqual(E.equals(['a', 1, true], ['b', 1, true]), false)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 2, true]), false)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, false]), false)\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var tuple = function tuple() {\n  var eqs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    eqs[_i] = arguments[_i];\n  }\n\n  return fromEquals(function (first, second) {\n    return eqs.every(function (E, i) {\n      return E.equals(first[i], second[i]);\n    });\n  });\n}; // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\n/* istanbul ignore next */\n\nvar contramap_ = function contramap_(fa, f) {\n  return pipe(fa, contramap(f));\n}; // -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n\n/**\n * @category Contravariant\n * @since 2.0.0\n */\n\n\nexport var contramap = function contramap(f) {\n  return function (fa) {\n    return fromEquals(function (x, y) {\n      return fa.equals(f(x), f(y));\n    });\n  };\n}; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var URI = 'Eq';\n/**\n * @category instances\n * @since 2.5.0\n */\n\nexport var eqStrict = {\n  equals: function equals(a, b) {\n    return a === b;\n  }\n};\nvar empty = {\n  equals: function equals() {\n    return true;\n  }\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var getSemigroup = function getSemigroup() {\n  return {\n    concat: function concat(x, y) {\n      return fromEquals(function (a, b) {\n        return x.equals(a, b) && y.equals(a, b);\n      });\n    }\n  };\n};\n/**\n * @category instances\n * @since 2.6.0\n */\n\nexport var getMonoid = function getMonoid() {\n  return {\n    concat: getSemigroup().concat,\n    empty: empty\n  };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Contravariant = {\n  URI: URI,\n  contramap: contramap_\n}; // -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getTupleEq = tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getStructEq = struct;\n/**\n * Use [`eqStrict`](#eqstrict) instead\n *\n * @since 2.0.0\n * @deprecated\n */\n\nexport var strictEqual = eqStrict.equals;\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var eq = Contravariant;\n/**\n * Use [`Eq`](./boolean.ts.html#eq) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var eqBoolean = eqStrict;\n/**\n * Use [`Eq`](./string.ts.html#eq) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var eqString = eqStrict;\n/**\n * Use [`Eq`](./number.ts.html#eq) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var eqNumber = eqStrict;\n/**\n * Use [`Eq`](./Date.ts.html#eq) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var eqDate = {\n  equals: function equals(first, second) {\n    return first.valueOf() === second.valueOf();\n  }\n};","var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { getMonoid } from './Ord';\nimport * as RNEA from './ReadonlyNonEmptyArray'; // -------------------------------------------------------------------------------------\n// internal\n// -------------------------------------------------------------------------------------\n\n/**\n * @internal\n */\n\nexport var isNonEmpty = function isNonEmpty(as) {\n  return as.length > 0;\n};\n/**\n * @internal\n */\n\nexport var isOutOfBound = function isOutOfBound(i, as) {\n  return i < 0 || i >= as.length;\n};\n/**\n * @internal\n */\n\nexport var prependW = function prependW(head) {\n  return function (tail) {\n    return __spreadArray([head], tail);\n  };\n};\n/**\n * @internal\n */\n\nexport var prepend = prependW;\n/**\n * @internal\n */\n\nexport var appendW = function appendW(end) {\n  return function (init) {\n    return __spreadArray(__spreadArray([], init), [end]);\n  };\n};\n/**\n * @internal\n */\n\nexport var append = appendW;\n/**\n * @internal\n */\n\nexport var unsafeInsertAt = function unsafeInsertAt(i, a, as) {\n  if (isNonEmpty(as)) {\n    var xs = fromReadonlyNonEmptyArray(as);\n    xs.splice(i, 0, a);\n    return xs;\n  }\n\n  return [a];\n};\n/**\n * @internal\n */\n\nexport var unsafeUpdateAt = function unsafeUpdateAt(i, a, as) {\n  var xs = fromReadonlyNonEmptyArray(as);\n  xs[i] = a;\n  return xs;\n};\n/**\n * Remove duplicates from a `NonEmptyArray`, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/NonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @category combinators\n * @since 2.11.0\n */\n\nexport var uniq = function uniq(E) {\n  return function (as) {\n    if (as.length === 1) {\n      return copy(as);\n    }\n\n    var out = [head(as)];\n    var rest = tail(as);\n\n    var _loop_1 = function _loop_1(a) {\n      if (out.every(function (o) {\n        return !E.equals(o, a);\n      })) {\n        out.push(a);\n      }\n    };\n\n    for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {\n      var a = rest_1[_i];\n\n      _loop_1(a);\n    }\n\n    return out;\n  };\n};\n/**\n * Sort the elements of a `NonEmptyArray` in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import * as NEA from 'fp-ts/NonEmptyArray'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n *\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n *\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = NEA.sortBy([byName, byAge])\n *\n * const persons: NEA.NonEmptyArray<Person> = [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 },\n *   { name: 'b', age: 2 }\n * ]\n *\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @category combinators\n * @since 2.11.0\n */\n\nexport var sortBy = function sortBy(ords) {\n  if (isNonEmpty(ords)) {\n    var M = getMonoid();\n    return sort(ords.reduce(M.concat, M.empty));\n  }\n\n  return copy;\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\n\nexport var union = function union(E) {\n  var uniqE = uniq(E);\n  return function (second) {\n    return function (first) {\n      return uniqE(pipe(first, concat(second)));\n    };\n  };\n};\n/**\n * Rotate a `NonEmptyArray` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n * assert.deepStrictEqual(rotate(-2)([1, 2, 3, 4, 5]), [3, 4, 5, 1, 2])\n *\n * @category combinators\n * @since 2.11.0\n */\n\nexport var rotate = function rotate(n) {\n  return function (as) {\n    var len = as.length;\n    var m = Math.round(n) % len;\n\n    if (isOutOfBound(Math.abs(m), as) || m === 0) {\n      return copy(as);\n    }\n\n    if (m < 0) {\n      var _a = splitAt(-m)(as),\n          f = _a[0],\n          s = _a[1];\n\n      return pipe(s, concat(f));\n    } else {\n      return rotate(m - len)(as);\n    }\n  };\n}; // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * @category constructors\n * @since 2.10.0\n */\n\nexport var fromReadonlyNonEmptyArray = _.fromReadonlyNonEmptyArray;\n/**\n * Builds a `NonEmptyArray` from an `Array` returning `none` if `as` is an empty array\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport var fromArray = function fromArray(as) {\n  return isNonEmpty(as) ? _.some(as) : _.none;\n};\n/**\n * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { makeBy } from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(pipe(5, makeBy(double)), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.11.0\n */\n\nexport var makeBy = function makeBy(f) {\n  return function (n) {\n    var j = Math.max(0, Math.floor(n));\n    var out = [f(0)];\n\n    for (var i = 1; i < j; i++) {\n      out.push(f(i));\n    }\n\n    return out;\n  };\n};\n/**\n * Create a `NonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { replicate } from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(3, replicate('a')), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.11.0\n */\n\nexport var replicate = function replicate(a) {\n  return makeBy(function () {\n    return a;\n  });\n};\n/**\n * Create a `NonEmptyArray` containing a range of integers, including both endpoints.\n *\n * @example\n * import { range } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])\n *\n * @category constructors\n * @since 2.11.0\n */\n\nexport var range = function range(start, end) {\n  return start <= end ? makeBy(function (i) {\n    return start + i;\n  })(end - start + 1) : [start];\n}; // -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Return the tuple of the `head` and the `tail`.\n *\n * @example\n * import { unprepend } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(unprepend([1, 2, 3]), [1, [2, 3]])\n *\n * @category destructors\n * @since 2.9.0\n */\n\nexport var unprepend = function unprepend(as) {\n  return [head(as), tail(as)];\n};\n/**\n * Return the tuple of the `init` and the `last`.\n *\n * @example\n * import { unappend } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(unappend([1, 2, 3, 4]), [[1, 2, 3], 4])\n *\n * @category destructors\n * @since 2.9.0\n */\n\nexport var unappend = function unappend(as) {\n  return [init(as), last(as)];\n};\nexport function concatW(second) {\n  return function (first) {\n    return first.concat(second);\n  };\n}\nexport function concat(x, y) {\n  return y ? x.concat(y) : function (y) {\n    return y.concat(x);\n  };\n}\n/**\n * @category combinators\n * @since 2.0.0\n */\n\nexport var reverse = function reverse(as) {\n  return __spreadArray([last(as)], as.slice(0, -1).reverse());\n};\nexport function group(E) {\n  return function (as) {\n    var len = as.length;\n\n    if (len === 0) {\n      return [];\n    }\n\n    var out = [];\n    var head = as[0];\n    var nea = [head];\n\n    for (var i = 1; i < len; i++) {\n      var a = as[i];\n\n      if (E.equals(a, head)) {\n        nea.push(a);\n      } else {\n        out.push(nea);\n        head = a;\n        nea = [head];\n      }\n    }\n\n    out.push(nea);\n    return out;\n  };\n}\n/**\n * Splits an array into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @example\n * import { groupBy } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(groupBy((s: string) => String(s.length))(['a', 'b', 'ab']), {\n *   '1': ['a', 'b'],\n *   '2': ['ab']\n * })\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var groupBy = function groupBy(f) {\n  return function (as) {\n    var out = {};\n\n    for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n      var a = as_1[_i];\n      var k = f(a);\n\n      if (out.hasOwnProperty(k)) {\n        out[k].push(a);\n      } else {\n        out[k] = [a];\n      }\n    }\n\n    return out;\n  };\n};\n/**\n * @category combinators\n * @since 2.0.0\n */\n\nexport var sort = function sort(O) {\n  return function (as) {\n    return as.slice().sort(O.compare);\n  };\n};\n/**\n * @category combinators\n * @since 2.0.0\n */\n\nexport var insertAt = function insertAt(i, a) {\n  return function (as) {\n    return i < 0 || i > as.length ? _.none : _.some(unsafeInsertAt(i, a, as));\n  };\n};\n/**\n * @category combinators\n * @since 2.0.0\n */\n\nexport var updateAt = function updateAt(i, a) {\n  return modifyAt(i, function () {\n    return a;\n  });\n};\n/**\n * @category combinators\n * @since 2.0.0\n */\n\nexport var modifyAt = function modifyAt(i, f) {\n  return function (as) {\n    return isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as));\n  };\n};\n/**\n * @category combinators\n * @since 2.0.0\n */\n\nexport var copy = fromReadonlyNonEmptyArray;\n/**\n * @category Pointed\n * @since 2.0.0\n */\n\nexport var of = function of(a) {\n  return [a];\n};\n/**\n * @category combinators\n * @since 2.5.1\n */\n\nexport var zipWith = function zipWith(as, bs, f) {\n  var cs = [f(as[0], bs[0])];\n  var len = Math.min(as.length, bs.length);\n\n  for (var i = 1; i < len; i++) {\n    cs[i] = f(as[i], bs[i]);\n  }\n\n  return cs;\n};\nexport function zip(as, bs) {\n  if (bs === undefined) {\n    return function (bs) {\n      return zip(bs, as);\n    };\n  }\n\n  return zipWith(as, bs, function (a, b) {\n    return [a, b];\n  });\n}\n/**\n * @category combinators\n * @since 2.5.1\n */\n\nexport var unzip = function unzip(abs) {\n  var fa = [abs[0][0]];\n  var fb = [abs[0][1]];\n\n  for (var i = 1; i < abs.length; i++) {\n    fa[i] = abs[i][0];\n    fb[i] = abs[i][1];\n  }\n\n  return [fa, fb];\n};\n/**\n * Prepend an element to every member of an array\n *\n * @example\n * import { prependAll } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var prependAll = function prependAll(middle) {\n  return function (as) {\n    var out = [middle, as[0]];\n\n    for (var i = 1; i < as.length; i++) {\n      out.push(middle, as[i]);\n    }\n\n    return out;\n  };\n};\n/**\n * Places an element in between members of an array\n *\n * @example\n * import { intersperse } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.9.0\n */\n\nexport var intersperse = function intersperse(middle) {\n  return function (as) {\n    var rest = tail(as);\n    return isNonEmpty(rest) ? pipe(rest, prependAll(middle), prepend(head(as))) : copy(as);\n  };\n};\n/**\n * @category combinators\n * @since 2.0.0\n */\n\nexport var foldMapWithIndex = RNEA.foldMapWithIndex;\n/**\n * @category combinators\n * @since 2.0.0\n */\n\nexport var foldMap = RNEA.foldMap;\n/**\n * @category combinators\n * @since 2.10.0\n */\n\nexport var chainWithIndex = function chainWithIndex(f) {\n  return function (as) {\n    var out = fromReadonlyNonEmptyArray(f(0, head(as)));\n\n    for (var i = 1; i < as.length; i++) {\n      out.push.apply(out, f(i, as[i]));\n    }\n\n    return out;\n  };\n};\n/**\n * @category combinators\n * @since 2.10.0\n */\n\nexport var chop = function chop(f) {\n  return function (as) {\n    var _a = f(as),\n        b = _a[0],\n        rest = _a[1];\n\n    var out = [b];\n    var next = rest;\n\n    while (isNonEmpty(next)) {\n      var _b = f(next),\n          b_1 = _b[0],\n          rest_2 = _b[1];\n\n      out.push(b_1);\n      next = rest_2;\n    }\n\n    return out;\n  };\n};\n/**\n * Splits a `NonEmptyArray` into two pieces, the first piece has max `n` elements.\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var splitAt = function splitAt(n) {\n  return function (as) {\n    var m = Math.max(1, n);\n    return m >= as.length ? [copy(as), []] : [pipe(as.slice(1, m), prepend(head(as))), as.slice(m)];\n  };\n};\n/**\n * @category combinators\n * @since 2.10.0\n */\n\nexport var chunksOf = function chunksOf(n) {\n  return chop(splitAt(n));\n}; // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\n/* istanbul ignore next */\n\nvar _map = function _map(fa, f) {\n  return pipe(fa, map(f));\n};\n/* istanbul ignore next */\n\n\nvar _mapWithIndex = function _mapWithIndex(fa, f) {\n  return pipe(fa, mapWithIndex(f));\n};\n/* istanbul ignore next */\n\n\nvar _ap = function _ap(fab, fa) {\n  return pipe(fab, ap(fa));\n};\n/* istanbul ignore next */\n\n\nvar _chain = function _chain(ma, f) {\n  return pipe(ma, chain(f));\n};\n/* istanbul ignore next */\n\n\nvar _extend = function _extend(wa, f) {\n  return pipe(wa, extend(f));\n};\n/* istanbul ignore next */\n\n\nvar _reduce = function _reduce(fa, b, f) {\n  return pipe(fa, reduce(b, f));\n};\n/* istanbul ignore next */\n\n\nvar _foldMap = function _foldMap(M) {\n  var foldMapM = foldMap(M);\n  return function (fa, f) {\n    return pipe(fa, foldMapM(f));\n  };\n};\n/* istanbul ignore next */\n\n\nvar _reduceRight = function _reduceRight(fa, b, f) {\n  return pipe(fa, reduceRight(b, f));\n};\n/* istanbul ignore next */\n\n\nvar _traverse = function _traverse(F) {\n  var traverseF = traverse(F);\n  return function (ta, f) {\n    return pipe(ta, traverseF(f));\n  };\n};\n/* istanbul ignore next */\n\n\nvar _alt = function _alt(fa, that) {\n  return pipe(fa, alt(that));\n};\n/* istanbul ignore next */\n\n\nvar _reduceWithIndex = function _reduceWithIndex(fa, b, f) {\n  return pipe(fa, reduceWithIndex(b, f));\n};\n/* istanbul ignore next */\n\n\nvar _foldMapWithIndex = function _foldMapWithIndex(M) {\n  var foldMapWithIndexM = foldMapWithIndex(M);\n  return function (fa, f) {\n    return pipe(fa, foldMapWithIndexM(f));\n  };\n};\n/* istanbul ignore next */\n\n\nvar _reduceRightWithIndex = function _reduceRightWithIndex(fa, b, f) {\n  return pipe(fa, reduceRightWithIndex(b, f));\n};\n/* istanbul ignore next */\n\n\nvar _traverseWithIndex = function _traverseWithIndex(F) {\n  var traverseWithIndexF = traverseWithIndex(F);\n  return function (ta, f) {\n    return pipe(ta, traverseWithIndexF(f));\n  };\n}; // -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\n\n\nexport var altW = function altW(that) {\n  return function (as) {\n    return pipe(as, concatW(that()));\n  };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.6.2\n */\n\nexport var alt = altW;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\n\nexport var ap = function ap(as) {\n  return chain(function (f) {\n    return pipe(as, map(f));\n  });\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\n\nexport var chain = function chain(f) {\n  return chainWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * @category Extend\n * @since 2.0.0\n */\n\nexport var extend = function extend(f) {\n  return function (as) {\n    var next = tail(as);\n    var out = [f(as)];\n\n    while (isNonEmpty(next)) {\n      out.push(f(next));\n      next = tail(next);\n    }\n\n    return out;\n  };\n};\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var duplicate = /*#__PURE__*/extend(identity);\n/**\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var flatten = /*#__PURE__*/chain(identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\n\nexport var map = function map(f) {\n  return mapWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * @category FunctorWithIndex\n * @since 2.0.0\n */\n\nexport var mapWithIndex = function mapWithIndex(f) {\n  return function (as) {\n    var out = [f(0, head(as))];\n\n    for (var i = 1; i < as.length; i++) {\n      out.push(f(i, as[i]));\n    }\n\n    return out;\n  };\n};\n/**\n * @category Foldable\n * @since 2.0.0\n */\n\nexport var reduce = RNEA.reduce;\n/**\n * @category FoldableWithIndex\n * @since 2.0.0\n */\n\nexport var reduceWithIndex = RNEA.reduceWithIndex;\n/**\n * @category Foldable\n * @since 2.0.0\n */\n\nexport var reduceRight = RNEA.reduceRight;\n/**\n * @category FoldableWithIndex\n * @since 2.0.0\n */\n\nexport var reduceRightWithIndex = RNEA.reduceRightWithIndex;\n/**\n * @since 2.6.3\n */\n\nexport var traverse = function traverse(F) {\n  var traverseWithIndexF = traverseWithIndex(F);\n  return function (f) {\n    return traverseWithIndexF(function (_, a) {\n      return f(a);\n    });\n  };\n};\n/**\n * @since 2.6.3\n */\n\nexport var sequence = function sequence(F) {\n  return traverseWithIndex(F)(function (_, a) {\n    return a;\n  });\n};\n/**\n * @since 2.6.3\n */\n\nexport var traverseWithIndex = function traverseWithIndex(F) {\n  return function (f) {\n    return function (as) {\n      var out = F.map(f(0, head(as)), of);\n\n      for (var i = 1; i < as.length; i++) {\n        out = F.ap(F.map(out, function (bs) {\n          return function (b) {\n            return pipe(bs, append(b));\n          };\n        }), f(i, as[i]));\n      }\n\n      return out;\n    };\n  };\n};\n/**\n * @since 2.7.0\n */\n\nexport var extract = RNEA.head; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var URI = 'NonEmptyArray';\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var getShow = RNEA.getShow;\n/**\n * Builds a `Semigroup` instance for `NonEmptyArray`\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport var getSemigroup = function getSemigroup() {\n  return {\n    concat: concat\n  };\n};\n/**\n * @example\n * import { getEq } from 'fp-ts/NonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * const E = getEq(N.Eq)\n * assert.strictEqual(E.equals([1, 2], [1, 2]), true)\n * assert.strictEqual(E.equals([1, 2], [1, 3]), false)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport var getEq = RNEA.getEq;\n/**\n * @category combinators\n * @since 2.11.0\n */\n\nexport var getUnionSemigroup = function getUnionSemigroup(E) {\n  var unionE = union(E);\n  return {\n    concat: function concat(first, second) {\n      return unionE(second)(first);\n    }\n  };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Functor = {\n  URI: URI,\n  map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var flap = /*#__PURE__*/flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Pointed = {\n  URI: URI,\n  of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var FunctorWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Apply = {\n  URI: URI,\n  map: _map,\n  ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var apFirst = /*#__PURE__*/apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var apSecond = /*#__PURE__*/apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Applicative = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Chain = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var chainFirst = /*#__PURE__*/chainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Monad = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of,\n  chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Foldable = {\n  URI: URI,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var FoldableWithIndex = {\n  URI: URI,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Traversable = {\n  URI: URI,\n  map: _map,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var TraversableWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex,\n  traverseWithIndex: _traverseWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Alt = {\n  URI: URI,\n  map: _map,\n  alt: _alt\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Comonad = {\n  URI: URI,\n  map: _map,\n  extend: _extend,\n  extract: extract\n}; // -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.9.0\n */\n\nexport var Do = /*#__PURE__*/of(_.emptyRecord);\n/**\n * @since 2.8.0\n */\n\nexport var bindTo = /*#__PURE__*/bindTo_(Functor);\n/**\n * @since 2.8.0\n */\n\nexport var bind = /*#__PURE__*/bind_(Chain); // -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.8.0\n */\n\nexport var apS = /*#__PURE__*/apS_(Apply); // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.0.0\n */\n\nexport var head = RNEA.head;\n/**\n * @since 2.0.0\n */\n\nexport var tail = function tail(as) {\n  return as.slice(1);\n};\n/**\n * @since 2.0.0\n */\n\nexport var last = RNEA.last;\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * @example\n * import { init } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), [1, 2])\n * assert.deepStrictEqual(init([1]), [])\n *\n * @since 2.2.0\n */\n\nexport var init = function init(as) {\n  return as.slice(0, -1);\n};\n/**\n * @since 2.0.0\n */\n\nexport var min = RNEA.min;\n/**\n * @since 2.0.0\n */\n\nexport var max = RNEA.max;\n/**\n * @since 2.10.0\n */\n\nexport var concatAll = function concatAll(S) {\n  return function (as) {\n    return as.reduce(S.concat);\n  };\n};\n/**\n * Break an `Array` into its first element and remaining elements.\n *\n * @category destructors\n * @since 2.11.0\n */\n\nexport var matchLeft = function matchLeft(f) {\n  return function (as) {\n    return f(head(as), tail(as));\n  };\n};\n/**\n * Break an `Array` into its initial elements and the last element.\n *\n * @category destructors\n * @since 2.11.0\n */\n\nexport var matchRight = function matchRight(f) {\n  return function (as) {\n    return f(init(as), last(as));\n  };\n};\n/**\n * Apply a function to the head, creating a new `NonEmptyArray`.\n *\n * @since 2.11.0\n */\n\nexport var modifyHead = function modifyHead(f) {\n  return function (as) {\n    return __spreadArray([f(head(as))], tail(as));\n  };\n};\n/**\n * Change the head, creating a new `NonEmptyArray`.\n *\n * @category combinators\n * @since 2.11.0\n */\n\nexport var updateHead = function updateHead(a) {\n  return modifyHead(function () {\n    return a;\n  });\n};\n/**\n * Apply a function to the last element, creating a new `NonEmptyArray`.\n *\n * @since 2.11.0\n */\n\nexport var modifyLast = function modifyLast(f) {\n  return function (as) {\n    return pipe(init(as), append(f(last(as))));\n  };\n};\n/**\n * Change the last element, creating a new `NonEmptyArray`.\n *\n * @category combinators\n * @since 2.11.0\n */\n\nexport var updateLast = function updateLast(a) {\n  return modifyLast(function () {\n    return a;\n  });\n};\nexport function groupSort(O) {\n  var sortO = sort(O);\n  var groupO = group(O);\n  return function (as) {\n    return isNonEmpty(as) ? groupO(sortO(as)) : [];\n  };\n}\nexport function filter(predicate) {\n  return filterWithIndex(function (_, a) {\n    return predicate(a);\n  });\n}\n/**\n * Use [`filterWithIndex`](./Array.ts.html#filterwithindex) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexport var filterWithIndex = function filterWithIndex(predicate) {\n  return function (as) {\n    return fromArray(as.filter(function (a, i) {\n      return predicate(i, a);\n    }));\n  };\n};\n/**\n * Use [`unprepend`](#unprepend) instead.\n *\n * @category destructors\n * @since 2.9.0\n * @deprecated\n */\n\nexport var uncons = unprepend;\n/**\n * Use [`unappend`](#unappend) instead.\n *\n * @category destructors\n * @since 2.9.0\n * @deprecated\n */\n\nexport var unsnoc = unappend;\nexport function cons(head, tail) {\n  return tail === undefined ? prepend(head) : pipe(tail, prepend(head));\n}\n/**\n * Use [`append`](./Array.ts.html#append) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\n\nexport var snoc = function snoc(init, end) {\n  return pipe(init, append(end));\n};\n/**\n * Use [`prependAll`](#prependall) instead.\n *\n * @category combinators\n * @since 2.9.0\n * @deprecated\n */\n\nexport var prependToAll = prependAll;\n/**\n * Use [`concatAll`](#concatall) instead.\n *\n * @since 2.5.0\n * @deprecated\n */\n\nexport var fold = RNEA.concatAll;\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var nonEmptyArray = {\n  URI: URI,\n  of: of,\n  map: _map,\n  mapWithIndex: _mapWithIndex,\n  ap: _ap,\n  chain: _chain,\n  extend: _extend,\n  extract: extract,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex,\n  traverseWithIndex: _traverseWithIndex,\n  alt: _alt\n};","import { eqStrict } from './Eq';\nimport { constant, constTrue, pipe } from './function'; // -------------------------------------------------------------------------------------\n// defaults\n// -------------------------------------------------------------------------------------\n\n/**\n * @category defaults\n * @since 2.10.0\n */\n\nexport var equalsDefault = function equalsDefault(compare) {\n  return function (first, second) {\n    return first === second || compare(first, second) === 0;\n  };\n}; // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * @category constructors\n * @since 2.0.0\n */\n\nexport var fromCompare = function fromCompare(_compare) {\n  return {\n    equals: equalsDefault(_compare),\n    compare: function compare(first, second) {\n      return first === second ? 0 : _compare(first, second);\n    }\n  };\n}; // -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n\n/**\n * Given a tuple of `Ord`s returns an `Ord` for the tuple.\n *\n * @example\n * import { tuple } from 'fp-ts/Ord'\n * import * as B from 'fp-ts/boolean'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n *\n * const O = tuple(S.Ord, N.Ord, B.Ord)\n * assert.strictEqual(O.compare(['a', 1, true], ['b', 2, true]), -1)\n * assert.strictEqual(O.compare(['a', 1, true], ['a', 2, true]), -1)\n * assert.strictEqual(O.compare(['a', 1, true], ['a', 1, false]), 1)\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var tuple = function tuple() {\n  var ords = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    ords[_i] = arguments[_i];\n  }\n\n  return fromCompare(function (first, second) {\n    var i = 0;\n\n    for (; i < ords.length - 1; i++) {\n      var r = ords[i].compare(first[i], second[i]);\n\n      if (r !== 0) {\n        return r;\n      }\n    }\n\n    return ords[i].compare(first[i], second[i]);\n  });\n};\n/**\n * @category combinators\n * @since 2.10.0\n */\n\nexport var reverse = function reverse(O) {\n  return fromCompare(function (first, second) {\n    return O.compare(second, first);\n  });\n}; // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\n/* istanbul ignore next */\n\nvar contramap_ = function contramap_(fa, f) {\n  return pipe(fa, contramap(f));\n}; // -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n\n/**\n * @category Contravariant\n * @since 2.0.0\n */\n\n\nexport var contramap = function contramap(f) {\n  return function (fa) {\n    return fromCompare(function (first, second) {\n      return fa.compare(f(first), f(second));\n    });\n  };\n}; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var URI = 'Ord';\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var getSemigroup = function getSemigroup() {\n  return {\n    concat: function concat(first, second) {\n      return fromCompare(function (a, b) {\n        var ox = first.compare(a, b);\n        return ox !== 0 ? ox : second.compare(a, b);\n      });\n    }\n  };\n};\n/**\n * Returns a `Monoid` such that:\n *\n * - its `concat(ord1, ord2)` operation will order first by `ord1`, and then by `ord2`\n * - its `empty` value is an `Ord` that always considers compared elements equal\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n * import { contramap, reverse, getMonoid } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as B from 'fp-ts/boolean'\n * import { pipe } from 'fp-ts/function'\n * import { concatAll } from 'fp-ts/Monoid'\n * import * as N from 'fp-ts/number'\n *\n * interface User {\n *   readonly id: number\n *   readonly name: string\n *   readonly age: number\n *   readonly rememberMe: boolean\n * }\n *\n * const byName = pipe(\n *   S.Ord,\n *   contramap((p: User) => p.name)\n * )\n *\n * const byAge = pipe(\n *   N.Ord,\n *   contramap((p: User) => p.age)\n * )\n *\n * const byRememberMe = pipe(\n *   B.Ord,\n *   contramap((p: User) => p.rememberMe)\n * )\n *\n * const M = getMonoid<User>()\n *\n * const users: Array<User> = [\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true }\n * ]\n *\n * // sort by name, then by age, then by `rememberMe`\n * const O1 = concatAll(M)([byName, byAge, byRememberMe])\n * assert.deepStrictEqual(sort(O1)(users), [\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false }\n * ])\n *\n * // now `rememberMe = true` first, then by name, then by age\n * const O2 = concatAll(M)([reverse(byRememberMe), byName, byAge])\n * assert.deepStrictEqual(sort(O2)(users), [\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false }\n * ])\n *\n * @category instances\n * @since 2.4.0\n */\n\nexport var getMonoid = function getMonoid() {\n  return {\n    concat: getSemigroup().concat,\n    empty: fromCompare(function () {\n      return 0;\n    })\n  };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Contravariant = {\n  URI: URI,\n  contramap: contramap_\n}; // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.11.0\n */\n\nexport var trivial = {\n  equals: constTrue,\n  compare: /*#__PURE__*/constant(0)\n};\n/**\n * @since 2.11.0\n */\n\nexport var equals = function equals(O) {\n  return function (second) {\n    return function (first) {\n      return first === second || O.compare(first, second) === 0;\n    };\n  };\n}; // TODO: curry in v3\n\n/**\n * Test whether one value is _strictly less than_ another\n *\n * @since 2.0.0\n */\n\nexport var lt = function lt(O) {\n  return function (first, second) {\n    return O.compare(first, second) === -1;\n  };\n}; // TODO: curry in v3\n\n/**\n * Test whether one value is _strictly greater than_ another\n *\n * @since 2.0.0\n */\n\nexport var gt = function gt(O) {\n  return function (first, second) {\n    return O.compare(first, second) === 1;\n  };\n}; // TODO: curry in v3\n\n/**\n * Test whether one value is _non-strictly less than_ another\n *\n * @since 2.0.0\n */\n\nexport var leq = function leq(O) {\n  return function (first, second) {\n    return O.compare(first, second) !== 1;\n  };\n}; // TODO: curry in v3\n\n/**\n * Test whether one value is _non-strictly greater than_ another\n *\n * @since 2.0.0\n */\n\nexport var geq = function geq(O) {\n  return function (first, second) {\n    return O.compare(first, second) !== -1;\n  };\n}; // TODO: curry in v3\n\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen\n *\n * @since 2.0.0\n */\n\nexport var min = function min(O) {\n  return function (first, second) {\n    return first === second || O.compare(first, second) < 1 ? first : second;\n  };\n}; // TODO: curry in v3\n\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen\n *\n * @since 2.0.0\n */\n\nexport var max = function max(O) {\n  return function (first, second) {\n    return first === second || O.compare(first, second) > -1 ? first : second;\n  };\n};\n/**\n * Clamp a value between a minimum and a maximum\n *\n * @since 2.0.0\n */\n\nexport var clamp = function clamp(O) {\n  var minO = min(O);\n  var maxO = max(O);\n  return function (low, hi) {\n    return function (a) {\n      return maxO(minO(a, hi), low);\n    };\n  };\n};\n/**\n * Test whether a value is between a minimum and a maximum (inclusive)\n *\n * @since 2.0.0\n */\n\nexport var between = function between(O) {\n  var ltO = lt(O);\n  var gtO = gt(O);\n  return function (low, hi) {\n    return function (a) {\n      return ltO(a, low) || gtO(a, hi) ? false : true;\n    };\n  };\n}; // -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n// tslint:disable: deprecation\n\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getTupleOrd = tuple;\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getDualOrd = reverse;\n/**\n * Use [`Contravariant`](#contravariant) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var ord = Contravariant; // default compare for primitive types\n\nfunction compare(first, second) {\n  return first < second ? -1 : first > second ? 1 : 0;\n}\n\nvar strictOrd = {\n  equals: eqStrict.equals,\n  compare: compare\n};\n/**\n * Use [`Ord`](./boolean.ts.html#ord) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var ordBoolean = strictOrd;\n/**\n * Use [`Ord`](./string.ts.html#ord) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var ordString = strictOrd;\n/**\n * Use [`Ord`](./number.ts.html#ord) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var ordNumber = strictOrd;\n/**\n * Use [`Ord`](./Date.ts.html#ord) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var ordDate = /*#__PURE__*/pipe(ordNumber, /*#__PURE__*/contramap(function (date) {\n  return date.valueOf();\n}));","/**\n * If a type `A` can form a `Semigroup` it has an **associative** binary operation.\n *\n * ```ts\n * interface Semigroup<A> {\n *   readonly concat: (x: A, y: A) => A\n * }\n * ```\n *\n * Associativity means the following equality must hold for any choice of `x`, `y`, and `z`.\n *\n * ```ts\n * concat(x, concat(y, z)) = concat(concat(x, y), z)\n * ```\n *\n * A common example of a semigroup is the type `string` with the operation `+`.\n *\n * ```ts\n * import { Semigroup } from 'fp-ts/Semigroup'\n *\n * const semigroupString: Semigroup<string> = {\n *   concat: (x, y) => x + y\n * }\n *\n * const x = 'x'\n * const y = 'y'\n * const z = 'z'\n *\n * semigroupString.concat(x, y) // 'xy'\n *\n * semigroupString.concat(x, semigroupString.concat(y, z)) // 'xyz'\n *\n * semigroupString.concat(semigroupString.concat(x, y), z) // 'xyz'\n * ```\n *\n * *Adapted from https://typelevel.org/cats*\n *\n * @since 2.0.0\n */\nimport { getSemigroup, identity } from './function';\nimport * as _ from './internal';\nimport * as M from './Magma';\nimport * as Or from './Ord'; // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Get a semigroup where `concat` will return the minimum, based on the provided order.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.min(N.Ord)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 1)\n *\n * @category constructors\n * @since 2.10.0\n */\n\nexport var min = function min(O) {\n  return {\n    concat: Or.min(O)\n  };\n};\n/**\n * Get a semigroup where `concat` will return the maximum, based on the provided order.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.max(N.Ord)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 2)\n *\n * @category constructors\n * @since 2.10.0\n */\n\nexport var max = function max(O) {\n  return {\n    concat: Or.max(O)\n  };\n};\n/**\n * @category constructors\n * @since 2.10.0\n */\n\nexport var constant = function constant(a) {\n  return {\n    concat: function concat() {\n      return a;\n    }\n  };\n}; // -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n\n/**\n * The dual of a `Semigroup`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import { reverse } from 'fp-ts/Semigroup'\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(reverse(S.Semigroup).concat('a', 'b'), 'ba')\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var reverse = M.reverse;\n/**\n * Given a struct of semigroups returns a semigroup for the struct.\n *\n * @example\n * import { struct } from 'fp-ts/Semigroup'\n * import * as N from 'fp-ts/number'\n *\n * interface Point {\n *   readonly x: number\n *   readonly y: number\n * }\n *\n * const S = struct<Point>({\n *   x: N.SemigroupSum,\n *   y: N.SemigroupSum\n * })\n *\n * assert.deepStrictEqual(S.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var struct = function struct(semigroups) {\n  return {\n    concat: function concat(first, second) {\n      var r = {};\n\n      for (var k in semigroups) {\n        if (_.has.call(semigroups, k)) {\n          r[k] = semigroups[k].concat(first[k], second[k]);\n        }\n      }\n\n      return r;\n    }\n  };\n};\n/**\n * Given a tuple of semigroups returns a semigroup for the tuple.\n *\n * @example\n * import { tuple } from 'fp-ts/Semigroup'\n * import * as B from 'fp-ts/boolean'\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/string'\n *\n * const S1 = tuple(S.Semigroup, N.SemigroupSum)\n * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const S2 = tuple(S.Semigroup, N.SemigroupSum, B.SemigroupAll)\n * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var tuple = function tuple() {\n  var semigroups = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    semigroups[_i] = arguments[_i];\n  }\n\n  return {\n    concat: function concat(first, second) {\n      return semigroups.map(function (s, i) {\n        return s.concat(first[i], second[i]);\n      });\n    }\n  };\n};\n/**\n * Between each pair of elements insert `middle`.\n *\n * @example\n * import { intercalate } from 'fp-ts/Semigroup'\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * const S1 = pipe(S.Semigroup, intercalate(' + '))\n *\n * assert.strictEqual(S1.concat('a', 'b'), 'a + b')\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var intercalate = function intercalate(middle) {\n  return function (S) {\n    return {\n      concat: function concat(x, y) {\n        return S.concat(x, S.concat(middle, y));\n      }\n    };\n  };\n}; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * Always return the first argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.first<number>().concat(1, 2), 1)\n *\n * @category instances\n * @since 2.10.0\n */\n\nexport var first = function first() {\n  return {\n    concat: identity\n  };\n};\n/**\n * Always return the last argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.last<number>().concat(1, 2), 2)\n *\n * @category instances\n * @since 2.10.0\n */\n\nexport var last = function last() {\n  return {\n    concat: function concat(_, y) {\n      return y;\n    }\n  };\n}; // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * Given a sequence of `as`, concat them and return the total.\n *\n * If `as` is empty, return the provided `startWith` value.\n *\n * @example\n * import { concatAll } from 'fp-ts/Semigroup'\n * import * as N from 'fp-ts/number'\n *\n * const sum = concatAll(N.SemigroupSum)(0)\n *\n * assert.deepStrictEqual(sum([1, 2, 3]), 6)\n * assert.deepStrictEqual(sum([]), 0)\n *\n * @since 2.10.0\n */\n\nexport var concatAll = M.concatAll; // -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n\n/**\n * Use `void` module instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var semigroupVoid = constant(undefined);\n/**\n * Use [`getAssignSemigroup`](./struct.ts.html#getAssignSemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getObjectSemigroup = function getObjectSemigroup() {\n  return {\n    concat: function concat(first, second) {\n      return Object.assign({}, first, second);\n    }\n  };\n};\n/**\n * Use [`last`](#last) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getLastSemigroup = last;\n/**\n * Use [`first`](#first) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getFirstSemigroup = first;\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getTupleSemigroup = tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getStructSemigroup = struct;\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getDualSemigroup = reverse;\n/**\n * Use [`max`](#max) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getJoinSemigroup = max;\n/**\n * Use [`min`](#min) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getMeetSemigroup = min;\n/**\n * Use [`intercalate`](#intercalate) instead.\n *\n * @category combinators\n * @since 2.5.0\n * @deprecated\n */\n\nexport var getIntercalateSemigroup = intercalate;\nexport function fold(S) {\n  var concatAllS = concatAll(S);\n  return function (startWith, as) {\n    return as === undefined ? concatAllS(startWith) : concatAllS(startWith)(as);\n  };\n}\n/**\n * Use [`SemigroupAll`](./boolean.ts.html#SemigroupAll) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var semigroupAll = {\n  concat: function concat(x, y) {\n    return x && y;\n  }\n};\n/**\n * Use [`SemigroupAny`](./boolean.ts.html#SemigroupAny) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var semigroupAny = {\n  concat: function concat(x, y) {\n    return x || y;\n  }\n};\n/**\n * Use [`getSemigroup`](./function.ts.html#getSemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getFunctionSemigroup = getSemigroup;\n/**\n * Use [`Semigroup`](./string.ts.html#Semigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var semigroupString = {\n  concat: function concat(x, y) {\n    return x + y;\n  }\n};\n/**\n * Use [`SemigroupSum`](./number.ts.html#SemigroupSum) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var semigroupSum = {\n  concat: function concat(x, y) {\n    return x + y;\n  }\n};\n/**\n * Use [`SemigroupProduct`](./number.ts.html#SemigroupProduct) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var semigroupProduct = {\n  concat: function concat(x, y) {\n    return x * y;\n  }\n};","var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { fromEquals } from './Eq';\nimport { identity, pipe, SK } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { getMonoid } from './Ord';\nimport * as Se from './Semigroup'; // -------------------------------------------------------------------------------------\n// internal\n// -------------------------------------------------------------------------------------\n\n/**\n * @internal\n */\n\nexport var empty = _.emptyReadonlyArray;\n/**\n * @internal\n */\n\nexport var isNonEmpty = _.isNonEmpty;\n/**\n * @internal\n */\n\nexport var isOutOfBound = function isOutOfBound(i, as) {\n  return i < 0 || i >= as.length;\n};\n/**\n * @internal\n */\n\nexport var prependW = function prependW(head) {\n  return function (tail) {\n    return __spreadArray([head], tail);\n  };\n};\n/**\n * @internal\n */\n\nexport var prepend = prependW;\n/**\n * @internal\n */\n\nexport var appendW = function appendW(end) {\n  return function (init) {\n    return __spreadArray(__spreadArray([], init), [end]);\n  };\n};\n/**\n * @internal\n */\n\nexport var append = appendW;\n/**\n * @internal\n */\n\nexport var unsafeInsertAt = function unsafeInsertAt(i, a, as) {\n  if (isNonEmpty(as)) {\n    var xs = _.fromReadonlyNonEmptyArray(as);\n\n    xs.splice(i, 0, a);\n    return xs;\n  }\n\n  return [a];\n};\n/**\n * @internal\n */\n\nexport var unsafeUpdateAt = function unsafeUpdateAt(i, a, as) {\n  if (as[i] === a) {\n    return as;\n  } else {\n    var xs = _.fromReadonlyNonEmptyArray(as);\n\n    xs[i] = a;\n    return xs;\n  }\n};\n/**\n * Remove duplicates from a `ReadonlyNonEmptyArray`, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/ReadonlyNonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @category combinators\n * @since 2.11.0\n */\n\nexport var uniq = function uniq(E) {\n  return function (as) {\n    if (as.length === 1) {\n      return as;\n    }\n\n    var out = [head(as)];\n    var rest = tail(as);\n\n    var _loop_1 = function _loop_1(a) {\n      if (out.every(function (o) {\n        return !E.equals(o, a);\n      })) {\n        out.push(a);\n      }\n    };\n\n    for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {\n      var a = rest_1[_i];\n\n      _loop_1(a);\n    }\n\n    return out;\n  };\n};\n/**\n * Sort the elements of a `ReadonlyNonEmptyArray` in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n *\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n *\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = RNEA.sortBy([byName, byAge])\n *\n * const persons: RNEA.ReadonlyNonEmptyArray<Person> = [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 },\n *   { name: 'b', age: 2 }\n * ]\n *\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @category combinators\n * @since 2.11.0\n */\n\nexport var sortBy = function sortBy(ords) {\n  if (isNonEmpty(ords)) {\n    var M = getMonoid();\n    return sort(ords.reduce(M.concat, M.empty));\n  }\n\n  return identity;\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\n\nexport var union = function union(E) {\n  var uniqE = uniq(E);\n  return function (second) {\n    return function (first) {\n      return uniqE(pipe(first, concat(second)));\n    };\n  };\n};\n/**\n * Rotate a `ReadonlyNonEmptyArray` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n * assert.deepStrictEqual(rotate(-2)([1, 2, 3, 4, 5]), [3, 4, 5, 1, 2])\n *\n * @category combinators\n * @since 2.11.0\n */\n\nexport var rotate = function rotate(n) {\n  return function (as) {\n    var len = as.length;\n    var m = Math.round(n) % len;\n\n    if (isOutOfBound(Math.abs(m), as) || m === 0) {\n      return as;\n    }\n\n    if (m < 0) {\n      var _a = splitAt(-m)(as),\n          f = _a[0],\n          s = _a[1];\n\n      return pipe(s, concat(f));\n    } else {\n      return rotate(m - len)(as);\n    }\n  };\n}; // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Return a `ReadonlyNonEmptyArray` from a `ReadonlyArray` returning `none` if the input is empty.\n *\n * @category constructors\n * @since 2.5.0\n */\n\nexport var fromReadonlyArray = function fromReadonlyArray(as) {\n  return isNonEmpty(as) ? _.some(as) : _.none;\n};\n/**\n * Return a `ReadonlyNonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { makeBy } from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(pipe(5, makeBy(double)), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.11.0\n */\n\nexport var makeBy = function makeBy(f) {\n  return function (n) {\n    var j = Math.max(0, Math.floor(n));\n    var out = [f(0)];\n\n    for (var i = 1; i < j; i++) {\n      out.push(f(i));\n    }\n\n    return out;\n  };\n};\n/**\n * Create a `ReadonlyNonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { replicate } from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(3, replicate('a')), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.11.0\n */\n\nexport var replicate = function replicate(a) {\n  return makeBy(function () {\n    return a;\n  });\n};\n/**\n * Create a `ReadonlyNonEmptyArray` containing a range of integers, including both endpoints.\n *\n * @example\n * import { range } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])\n *\n * @category constructors\n * @since 2.11.0\n */\n\nexport var range = function range(start, end) {\n  return start <= end ? makeBy(function (i) {\n    return start + i;\n  })(end - start + 1) : [start];\n}; // -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Return the tuple of the `head` and the `tail`.\n *\n * @example\n * import { unprepend } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(unprepend([1, 2, 3, 4]), [1, [2, 3, 4]])\n *\n * @category destructors\n * @since 2.9.0\n */\n\nexport var unprepend = function unprepend(as) {\n  return [head(as), tail(as)];\n};\n/**\n * Return the tuple of the `init` and the `last`.\n *\n * @example\n * import { unappend } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(unappend([1, 2, 3, 4]), [[1, 2, 3], 4])\n *\n * @category destructors\n * @since 2.9.0\n */\n\nexport var unappend = function unappend(as) {\n  return [init(as), last(as)];\n}; // -------------------------------------------------------------------------------------\n// interop\n// -------------------------------------------------------------------------------------\n\n/**\n * @category interop\n * @since 2.5.0\n */\n\nexport var fromArray = function fromArray(as) {\n  return fromReadonlyArray(as.slice());\n};\nexport function concatW(second) {\n  return function (first) {\n    return first.concat(second);\n  };\n}\nexport function concat(x, y) {\n  return y ? x.concat(y) : function (y) {\n    return y.concat(x);\n  };\n}\n/**\n * @category combinators\n * @since 2.5.0\n */\n\nexport var reverse = function reverse(as) {\n  return as.length === 1 ? as : __spreadArray([last(as)], as.slice(0, -1).reverse());\n};\nexport function group(E) {\n  return function (as) {\n    var len = as.length;\n\n    if (len === 0) {\n      return empty;\n    }\n\n    var out = [];\n    var head = as[0];\n    var nea = [head];\n\n    for (var i = 1; i < len; i++) {\n      var a = as[i];\n\n      if (E.equals(a, head)) {\n        nea.push(a);\n      } else {\n        out.push(nea);\n        head = a;\n        nea = [head];\n      }\n    }\n\n    out.push(nea);\n    return out;\n  };\n}\n/**\n * Splits an array into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @example\n * import { groupBy } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(groupBy((s: string) => String(s.length))(['a', 'b', 'ab']), {\n *   '1': ['a', 'b'],\n *   '2': ['ab']\n * })\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var groupBy = function groupBy(f) {\n  return function (as) {\n    var out = {};\n\n    for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n      var a = as_1[_i];\n      var k = f(a);\n\n      if (out.hasOwnProperty(k)) {\n        out[k].push(a);\n      } else {\n        out[k] = [a];\n      }\n    }\n\n    return out;\n  };\n};\n/**\n * @category combinators\n * @since 2.5.0\n */\n\nexport var sort = function sort(O) {\n  return function (as) {\n    return as.length === 1 ? as : as.slice().sort(O.compare);\n  };\n};\n/**\n * @category combinators\n * @since 2.5.0\n */\n\nexport var updateAt = function updateAt(i, a) {\n  return modifyAt(i, function () {\n    return a;\n  });\n};\n/**\n * @category combinators\n * @since 2.5.0\n */\n\nexport var modifyAt = function modifyAt(i, f) {\n  return function (as) {\n    return isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as));\n  };\n};\n/**\n * @category combinators\n * @since 2.5.1\n */\n\nexport var zipWith = function zipWith(as, bs, f) {\n  var cs = [f(as[0], bs[0])];\n  var len = Math.min(as.length, bs.length);\n\n  for (var i = 1; i < len; i++) {\n    cs[i] = f(as[i], bs[i]);\n  }\n\n  return cs;\n};\nexport function zip(as, bs) {\n  if (bs === undefined) {\n    return function (bs) {\n      return zip(bs, as);\n    };\n  }\n\n  return zipWith(as, bs, function (a, b) {\n    return [a, b];\n  });\n}\n/**\n * @category combinators\n * @since 2.5.1\n */\n\nexport var unzip = function unzip(abs) {\n  var fa = [abs[0][0]];\n  var fb = [abs[0][1]];\n\n  for (var i = 1; i < abs.length; i++) {\n    fa[i] = abs[i][0];\n    fb[i] = abs[i][1];\n  }\n\n  return [fa, fb];\n};\n/**\n * Prepend an element to every member of a `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { prependAll } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var prependAll = function prependAll(middle) {\n  return function (as) {\n    var out = [middle, as[0]];\n\n    for (var i = 1; i < as.length; i++) {\n      out.push(middle, as[i]);\n    }\n\n    return out;\n  };\n};\n/**\n * Places an element in between members of a `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { intersperse } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.9.0\n */\n\nexport var intersperse = function intersperse(middle) {\n  return function (as) {\n    var rest = tail(as);\n    return isNonEmpty(rest) ? pipe(rest, prependAll(middle), prepend(head(as))) : as;\n  };\n};\n/**\n * @category combinators\n * @since 2.10.0\n */\n\nexport var chainWithIndex = function chainWithIndex(f) {\n  return function (as) {\n    var out = _.fromReadonlyNonEmptyArray(f(0, head(as)));\n\n    for (var i = 1; i < as.length; i++) {\n      out.push.apply(out, f(i, as[i]));\n    }\n\n    return out;\n  };\n};\n/**\n * A useful recursion pattern for processing a `ReadonlyNonEmptyArray` to produce a new `ReadonlyNonEmptyArray`, often used for \"chopping\" up the input\n * `ReadonlyNonEmptyArray`. Typically `chop` is called with some function that will consume an initial prefix of the `ReadonlyNonEmptyArray` and produce a\n * value and the tail of the `ReadonlyNonEmptyArray`.\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var chop = function chop(f) {\n  return function (as) {\n    var _a = f(as),\n        b = _a[0],\n        rest = _a[1];\n\n    var out = [b];\n    var next = rest;\n\n    while (isNonEmpty(next)) {\n      var _b = f(next),\n          b_1 = _b[0],\n          rest_2 = _b[1];\n\n      out.push(b_1);\n      next = rest_2;\n    }\n\n    return out;\n  };\n};\n/**\n * Splits a `ReadonlyNonEmptyArray` into two pieces, the first piece has max `n` elements.\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var splitAt = function splitAt(n) {\n  return function (as) {\n    var m = Math.max(1, n);\n    return m >= as.length ? [as, empty] : [pipe(as.slice(1, m), prepend(head(as))), as.slice(m)];\n  };\n};\n/**\n * Splits a `ReadonlyNonEmptyArray` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `ReadonlyNonEmptyArray`.\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var chunksOf = function chunksOf(n) {\n  return chop(splitAt(n));\n}; // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\nvar _map = function _map(fa, f) {\n  return pipe(fa, map(f));\n};\n/* istanbul ignore next */\n\n\nvar _mapWithIndex = function _mapWithIndex(fa, f) {\n  return pipe(fa, mapWithIndex(f));\n};\n\nvar _ap = function _ap(fab, fa) {\n  return pipe(fab, ap(fa));\n};\n\nvar _chain = function _chain(ma, f) {\n  return pipe(ma, chain(f));\n};\n/* istanbul ignore next */\n\n\nvar _extend = function _extend(wa, f) {\n  return pipe(wa, extend(f));\n};\n/* istanbul ignore next */\n\n\nvar _reduce = function _reduce(fa, b, f) {\n  return pipe(fa, reduce(b, f));\n};\n/* istanbul ignore next */\n\n\nvar _foldMap = function _foldMap(M) {\n  var foldMapM = foldMap(M);\n  return function (fa, f) {\n    return pipe(fa, foldMapM(f));\n  };\n};\n/* istanbul ignore next */\n\n\nvar _reduceRight = function _reduceRight(fa, b, f) {\n  return pipe(fa, reduceRight(b, f));\n};\n/* istanbul ignore next */\n\n\nvar _traverse = function _traverse(F) {\n  var traverseF = traverse(F);\n  return function (ta, f) {\n    return pipe(ta, traverseF(f));\n  };\n};\n/* istanbul ignore next */\n\n\nvar _alt = function _alt(fa, that) {\n  return pipe(fa, alt(that));\n};\n/* istanbul ignore next */\n\n\nvar _reduceWithIndex = function _reduceWithIndex(fa, b, f) {\n  return pipe(fa, reduceWithIndex(b, f));\n};\n/* istanbul ignore next */\n\n\nvar _foldMapWithIndex = function _foldMapWithIndex(M) {\n  var foldMapWithIndexM = foldMapWithIndex(M);\n  return function (fa, f) {\n    return pipe(fa, foldMapWithIndexM(f));\n  };\n};\n/* istanbul ignore next */\n\n\nvar _reduceRightWithIndex = function _reduceRightWithIndex(fa, b, f) {\n  return pipe(fa, reduceRightWithIndex(b, f));\n};\n/* istanbul ignore next */\n\n\nvar _traverseWithIndex = function _traverseWithIndex(F) {\n  var traverseWithIndexF = traverseWithIndex(F);\n  return function (ta, f) {\n    return pipe(ta, traverseWithIndexF(f));\n  };\n}; // -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n\n/**\n * @category Pointed\n * @since 2.5.0\n */\n\n\nexport var of = _.singleton;\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\n\nexport var altW = function altW(that) {\n  return function (as) {\n    return pipe(as, concatW(that()));\n  };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.6.2\n */\n\nexport var alt = altW;\n/**\n * @category Apply\n * @since 2.5.0\n */\n\nexport var ap = function ap(as) {\n  return chain(function (f) {\n    return pipe(as, map(f));\n  });\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.5.0\n */\n\nexport var chain = function chain(f) {\n  return chainWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * @category Extend\n * @since 2.5.0\n */\n\nexport var extend = function extend(f) {\n  return function (as) {\n    var next = tail(as);\n    var out = [f(as)];\n\n    while (isNonEmpty(next)) {\n      out.push(f(next));\n      next = tail(next);\n    }\n\n    return out;\n  };\n};\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var duplicate = /*#__PURE__*/extend(identity);\n/**\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var flatten = /*#__PURE__*/chain(identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.5.0\n */\n\nexport var map = function map(f) {\n  return mapWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * @category FunctorWithIndex\n * @since 2.5.0\n */\n\nexport var mapWithIndex = function mapWithIndex(f) {\n  return function (as) {\n    var out = [f(0, head(as))];\n\n    for (var i = 1; i < as.length; i++) {\n      out.push(f(i, as[i]));\n    }\n\n    return out;\n  };\n};\n/**\n * @category Foldable\n * @since 2.5.0\n */\n\nexport var reduce = function reduce(b, f) {\n  return reduceWithIndex(b, function (_, b, a) {\n    return f(b, a);\n  });\n};\n/**\n * **Note**. The constraint is relaxed: a `Semigroup` instead of a `Monoid`.\n *\n * @category Foldable\n * @since 2.5.0\n */\n\nexport var foldMap = function foldMap(S) {\n  return function (f) {\n    return function (as) {\n      return as.slice(1).reduce(function (s, a) {\n        return S.concat(s, f(a));\n      }, f(as[0]));\n    };\n  };\n};\n/**\n * @category Foldable\n * @since 2.5.0\n */\n\nexport var reduceRight = function reduceRight(b, f) {\n  return reduceRightWithIndex(b, function (_, b, a) {\n    return f(b, a);\n  });\n};\n/**\n * @category FoldableWithIndex\n * @since 2.5.0\n */\n\nexport var reduceWithIndex = function reduceWithIndex(b, f) {\n  return function (as) {\n    return as.reduce(function (b, a, i) {\n      return f(i, b, a);\n    }, b);\n  };\n};\n/**\n * **Note**. The constraint is relaxed: a `Semigroup` instead of a `Monoid`.\n *\n * @category FoldableWithIndex\n * @since 2.5.0\n */\n\nexport var foldMapWithIndex = function foldMapWithIndex(S) {\n  return function (f) {\n    return function (as) {\n      return as.slice(1).reduce(function (s, a, i) {\n        return S.concat(s, f(i + 1, a));\n      }, f(0, as[0]));\n    };\n  };\n};\n/**\n * @category FoldableWithIndex\n * @since 2.5.0\n */\n\nexport var reduceRightWithIndex = function reduceRightWithIndex(b, f) {\n  return function (as) {\n    return as.reduceRight(function (b, a, i) {\n      return f(i, a, b);\n    }, b);\n  };\n};\n/**\n * @category Traversable\n * @since 2.6.3\n */\n\nexport var traverse = function traverse(F) {\n  var traverseWithIndexF = traverseWithIndex(F);\n  return function (f) {\n    return traverseWithIndexF(function (_, a) {\n      return f(a);\n    });\n  };\n};\n/**\n * @category Traversable\n * @since 2.6.3\n */\n\nexport var sequence = function sequence(F) {\n  return traverseWithIndex(F)(SK);\n};\n/**\n * @category TraversableWithIndex\n * @since 2.6.3\n */\n\nexport var traverseWithIndex = function traverseWithIndex(F) {\n  return function (f) {\n    return function (as) {\n      var out = F.map(f(0, head(as)), of);\n\n      for (var i = 1; i < as.length; i++) {\n        out = F.ap(F.map(out, function (bs) {\n          return function (b) {\n            return pipe(bs, append(b));\n          };\n        }), f(i, as[i]));\n      }\n\n      return out;\n    };\n  };\n};\n/**\n * @category Comonad\n * @since 2.6.3\n */\n\nexport var extract = _.head; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.5.0\n */\n\nexport var URI = 'ReadonlyNonEmptyArray';\n/**\n * @category instances\n * @since 2.5.0\n */\n\nexport var getShow = function getShow(S) {\n  return {\n    show: function show(as) {\n      return \"[\" + as.map(S.show).join(', ') + \"]\";\n    }\n  };\n};\n/**\n * Builds a `Semigroup` instance for `ReadonlyNonEmptyArray`\n *\n * @category instances\n * @since 2.5.0\n */\n\nexport var getSemigroup = function getSemigroup() {\n  return {\n    concat: concat\n  };\n};\n/**\n * @example\n * import { getEq } from 'fp-ts/ReadonlyNonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * const E = getEq(N.Eq)\n * assert.strictEqual(E.equals([1, 2], [1, 2]), true)\n * assert.strictEqual(E.equals([1, 2], [1, 3]), false)\n *\n * @category instances\n * @since 2.5.0\n */\n\nexport var getEq = function getEq(E) {\n  return fromEquals(function (xs, ys) {\n    return xs.length === ys.length && xs.every(function (x, i) {\n      return E.equals(x, ys[i]);\n    });\n  });\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\n\nexport var getUnionSemigroup = function getUnionSemigroup(E) {\n  var unionE = union(E);\n  return {\n    concat: function concat(first, second) {\n      return unionE(second)(first);\n    }\n  };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Functor = {\n  URI: URI,\n  map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var flap = /*#__PURE__*/flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Pointed = {\n  URI: URI,\n  of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var FunctorWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Apply = {\n  URI: URI,\n  map: _map,\n  ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var apFirst = /*#__PURE__*/apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var apSecond = /*#__PURE__*/apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Applicative = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Chain = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport var chainFirst = /*#__PURE__*/chainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Monad = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of,\n  chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Foldable = {\n  URI: URI,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var FoldableWithIndex = {\n  URI: URI,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Traversable = {\n  URI: URI,\n  map: _map,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var TraversableWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex,\n  traverseWithIndex: _traverseWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Alt = {\n  URI: URI,\n  map: _map,\n  alt: _alt\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Comonad = {\n  URI: URI,\n  map: _map,\n  extend: _extend,\n  extract: extract\n}; // -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.9.0\n */\n\nexport var Do = /*#__PURE__*/of(_.emptyRecord);\n/**\n * @since 2.8.0\n */\n\nexport var bindTo = /*#__PURE__*/bindTo_(Functor);\n/**\n * @since 2.8.0\n */\n\nexport var bind = /*#__PURE__*/bind_(Chain); // -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.8.0\n */\n\nexport var apS = /*#__PURE__*/apS_(Apply); // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.5.0\n */\n\nexport var head = extract;\n/**\n * @since 2.5.0\n */\n\nexport var tail = _.tail;\n/**\n * @since 2.5.0\n */\n\nexport var last = function last(as) {\n  return as[as.length - 1];\n};\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * @example\n * import { init } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), [1, 2])\n * assert.deepStrictEqual(init([1]), [])\n *\n * @since 2.5.0\n */\n\nexport var init = function init(as) {\n  return as.slice(0, -1);\n};\n/**\n * @since 2.5.0\n */\n\nexport var min = function min(O) {\n  var S = Se.min(O);\n  return function (as) {\n    return as.reduce(S.concat);\n  };\n};\n/**\n * @since 2.5.0\n */\n\nexport var max = function max(O) {\n  var S = Se.max(O);\n  return function (as) {\n    return as.reduce(S.concat);\n  };\n};\n/**\n * @since 2.10.0\n */\n\nexport var concatAll = function concatAll(S) {\n  return function (as) {\n    return as.reduce(S.concat);\n  };\n};\n/**\n * Break a `ReadonlyArray` into its first element and remaining elements.\n *\n * @category destructors\n * @since 2.11.0\n */\n\nexport var matchLeft = function matchLeft(f) {\n  return function (as) {\n    return f(head(as), tail(as));\n  };\n};\n/**\n * Break a `ReadonlyArray` into its initial elements and the last element.\n *\n * @category destructors\n * @since 2.11.0\n */\n\nexport var matchRight = function matchRight(f) {\n  return function (as) {\n    return f(init(as), last(as));\n  };\n};\n/**\n * Apply a function to the head, creating a new `ReadonlyNonEmptyArray`.\n *\n * @since 2.11.0\n */\n\nexport var modifyHead = function modifyHead(f) {\n  return function (as) {\n    return __spreadArray([f(head(as))], tail(as));\n  };\n};\n/**\n * Change the head, creating a new `ReadonlyNonEmptyArray`.\n *\n * @category combinators\n * @since 2.11.0\n */\n\nexport var updateHead = function updateHead(a) {\n  return modifyHead(function () {\n    return a;\n  });\n};\n/**\n * Apply a function to the last element, creating a new `ReadonlyNonEmptyArray`.\n *\n * @since 2.11.0\n */\n\nexport var modifyLast = function modifyLast(f) {\n  return function (as) {\n    return pipe(init(as), append(f(last(as))));\n  };\n};\n/**\n * Change the last element, creating a new `ReadonlyNonEmptyArray`.\n *\n * @category combinators\n * @since 2.11.0\n */\n\nexport var updateLast = function updateLast(a) {\n  return modifyLast(function () {\n    return a;\n  });\n};\nexport function groupSort(O) {\n  var sortO = sort(O);\n  var groupO = group(O);\n  return function (as) {\n    return isNonEmpty(as) ? groupO(sortO(as)) : empty;\n  };\n}\nexport function filter(predicate) {\n  return filterWithIndex(function (_, a) {\n    return predicate(a);\n  });\n}\n/**\n * Use [`filterWithIndex`](./ReadonlyArray.ts.html#filterwithindex) instead.\n *\n * @category combinators\n * @since 2.5.0\n * @deprecated\n */\n\nexport var filterWithIndex = function filterWithIndex(predicate) {\n  return function (as) {\n    return fromReadonlyArray(as.filter(function (a, i) {\n      return predicate(i, a);\n    }));\n  };\n};\n/**\n * Use [`unprepend`](#unprepend) instead.\n *\n * @category destructors\n * @since 2.10.0\n * @deprecated\n */\n\nexport var uncons = unprepend;\n/**\n * Use [`unappend`](#unappend) instead.\n *\n * @category destructors\n * @since 2.10.0\n * @deprecated\n */\n\nexport var unsnoc = unappend;\nexport function cons(head, tail) {\n  return tail === undefined ? prepend(head) : pipe(tail, prepend(head));\n}\n/**\n * Use [`append`](./ReadonlyArray.ts.html#append) instead.\n *\n * @category constructors\n * @since 2.5.0\n * @deprecated\n */\n\nexport var snoc = function snoc(init, end) {\n  return pipe(init, concat([end]));\n};\n/**\n * Use [`insertAt`](./ReadonlyArray.ts.html#insertat) instead.\n *\n * @category combinators\n * @since 2.5.0\n * @deprecated\n */\n\nexport var insertAt = function insertAt(i, a) {\n  return function (as) {\n    return i < 0 || i > as.length ? _.none : _.some(unsafeInsertAt(i, a, as));\n  };\n};\n/**\n * Use [`prependAll`](#prependall) instead.\n *\n * @category combinators\n * @since 2.9.0\n * @deprecated\n */\n\nexport var prependToAll = prependAll;\n/**\n * Use [`concatAll`](#concatall) instead.\n *\n * @since 2.5.0\n * @deprecated\n */\n\nexport var fold = concatAll;\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.5.0\n * @deprecated\n */\n\nexport var readonlyNonEmptyArray = {\n  URI: URI,\n  of: of,\n  map: _map,\n  mapWithIndex: _mapWithIndex,\n  ap: _ap,\n  chain: _chain,\n  extend: _extend,\n  extract: extract,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex,\n  traverseWithIndex: _traverseWithIndex,\n  alt: _alt\n};","// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getBooleanAlgebra = function getBooleanAlgebra(B) {\n  return function () {\n    return {\n      meet: function meet(x, y) {\n        return function (a) {\n          return B.meet(x(a), y(a));\n        };\n      },\n      join: function join(x, y) {\n        return function (a) {\n          return B.join(x(a), y(a));\n        };\n      },\n      zero: function zero() {\n        return B.zero;\n      },\n      one: function one() {\n        return B.one;\n      },\n      implies: function implies(x, y) {\n        return function (a) {\n          return B.implies(x(a), y(a));\n        };\n      },\n      not: function not(x) {\n        return function (a) {\n          return B.not(x(a));\n        };\n      }\n    };\n  };\n};\n/**\n * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.\n *\n * @example\n * import { Predicate, getSemigroup } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const S1 = getSemigroup(B.SemigroupAll)<number>()\n *\n * assert.deepStrictEqual(S1.concat(f, g)(1), true)\n * assert.deepStrictEqual(S1.concat(f, g)(3), false)\n *\n * const S2 = getSemigroup(B.SemigroupAny)<number>()\n *\n * assert.deepStrictEqual(S2.concat(f, g)(1), true)\n * assert.deepStrictEqual(S2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\n\nexport var getSemigroup = function getSemigroup(S) {\n  return function () {\n    return {\n      concat: function concat(f, g) {\n        return function (a) {\n          return S.concat(f(a), g(a));\n        };\n      }\n    };\n  };\n};\n/**\n * Unary functions form a monoid as long as you can provide a monoid for the codomain.\n *\n * @example\n * import { Predicate } from 'fp-ts/Predicate'\n * import { getMonoid } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const M1 = getMonoid(B.MonoidAll)<number>()\n *\n * assert.deepStrictEqual(M1.concat(f, g)(1), true)\n * assert.deepStrictEqual(M1.concat(f, g)(3), false)\n *\n * const M2 = getMonoid(B.MonoidAny)<number>()\n *\n * assert.deepStrictEqual(M2.concat(f, g)(1), true)\n * assert.deepStrictEqual(M2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\n\nexport var getMonoid = function getMonoid(M) {\n  var getSemigroupM = getSemigroup(M);\n  return function () {\n    return {\n      concat: getSemigroupM().concat,\n      empty: function empty() {\n        return M.empty;\n      }\n    };\n  };\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var getSemiring = function getSemiring(S) {\n  return {\n    add: function add(f, g) {\n      return function (x) {\n        return S.add(f(x), g(x));\n      };\n    },\n    zero: function zero() {\n      return S.zero;\n    },\n    mul: function mul(f, g) {\n      return function (x) {\n        return S.mul(f(x), g(x));\n      };\n    },\n    one: function one() {\n      return S.one;\n    }\n  };\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var getRing = function getRing(R) {\n  var S = getSemiring(R);\n  return {\n    add: S.add,\n    mul: S.mul,\n    one: S.one,\n    zero: S.zero,\n    sub: function sub(f, g) {\n      return function (x) {\n        return R.sub(f(x), g(x));\n      };\n    }\n  };\n}; // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.11.0\n */\n\nexport var apply = function apply(a) {\n  return function (f) {\n    return f(a);\n  };\n};\n/**\n * @since 2.0.0\n */\n\nexport function identity(a) {\n  return a;\n}\n/**\n * @since 2.0.0\n */\n\nexport var unsafeCoerce = identity;\n/**\n * @since 2.0.0\n */\n\nexport function constant(a) {\n  return function () {\n    return a;\n  };\n}\n/**\n * A thunk that returns always `true`.\n *\n * @since 2.0.0\n */\n\nexport var constTrue = /*#__PURE__*/constant(true);\n/**\n * A thunk that returns always `false`.\n *\n * @since 2.0.0\n */\n\nexport var constFalse = /*#__PURE__*/constant(false);\n/**\n * A thunk that returns always `null`.\n *\n * @since 2.0.0\n */\n\nexport var constNull = /*#__PURE__*/constant(null);\n/**\n * A thunk that returns always `undefined`.\n *\n * @since 2.0.0\n */\n\nexport var constUndefined = /*#__PURE__*/constant(undefined);\n/**\n * A thunk that returns always `void`.\n *\n * @since 2.0.0\n */\n\nexport var constVoid = constUndefined;\n/**\n * Flips the order of the arguments of a function of two arguments.\n *\n * @since 2.0.0\n */\n\nexport function flip(f) {\n  return function (b, a) {\n    return f(a, b);\n  };\n}\nexport function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {\n  switch (arguments.length) {\n    case 1:\n      return ab;\n\n    case 2:\n      return function () {\n        return bc(ab.apply(this, arguments));\n      };\n\n    case 3:\n      return function () {\n        return cd(bc(ab.apply(this, arguments)));\n      };\n\n    case 4:\n      return function () {\n        return de(cd(bc(ab.apply(this, arguments))));\n      };\n\n    case 5:\n      return function () {\n        return ef(de(cd(bc(ab.apply(this, arguments)))));\n      };\n\n    case 6:\n      return function () {\n        return fg(ef(de(cd(bc(ab.apply(this, arguments))))));\n      };\n\n    case 7:\n      return function () {\n        return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));\n      };\n\n    case 8:\n      return function () {\n        return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));\n      };\n\n    case 9:\n      return function () {\n        return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));\n      };\n  }\n\n  return;\n}\n/**\n * @since 2.0.0\n */\n\nexport function tuple() {\n  var t = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    t[_i] = arguments[_i];\n  }\n\n  return t;\n}\n/**\n * @since 2.0.0\n */\n\nexport function increment(n) {\n  return n + 1;\n}\n/**\n * @since 2.0.0\n */\n\nexport function decrement(n) {\n  return n - 1;\n}\n/**\n * @since 2.0.0\n */\n\nexport function absurd(_) {\n  throw new Error('Called `absurd` function which should be uncallable');\n}\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from 'fp-ts/function'\n *\n * const add = tupled((x: number, y: number): number => x + y)\n *\n * assert.strictEqual(add([1, 2]), 3)\n *\n * @since 2.4.0\n */\n\nexport function tupled(f) {\n  return function (a) {\n    return f.apply(void 0, a);\n  };\n}\n/**\n * Inverse function of `tupled`\n *\n * @since 2.4.0\n */\n\nexport function untupled(f) {\n  return function () {\n    var a = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      a[_i] = arguments[_i];\n    }\n\n    return f(a);\n  };\n}\nexport function pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {\n  switch (arguments.length) {\n    case 1:\n      return a;\n\n    case 2:\n      return ab(a);\n\n    case 3:\n      return bc(ab(a));\n\n    case 4:\n      return cd(bc(ab(a)));\n\n    case 5:\n      return de(cd(bc(ab(a))));\n\n    case 6:\n      return ef(de(cd(bc(ab(a)))));\n\n    case 7:\n      return fg(ef(de(cd(bc(ab(a))))));\n\n    case 8:\n      return gh(fg(ef(de(cd(bc(ab(a)))))));\n\n    case 9:\n      return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n\n    default:\n      var ret = arguments[0];\n\n      for (var i = 1; i < arguments.length; i++) {\n        ret = arguments[i](ret);\n      }\n\n      return ret;\n  }\n}\n/**\n * Type hole simulation\n *\n * @since 2.7.0\n */\n\nexport var hole = absurd;\n/**\n * @since 2.11.0\n */\n\nexport var SK = function SK(_, b) {\n  return b;\n};\n/**\n * Use `Predicate` module instead.\n *\n * @since 2.0.0\n * @deprecated\n */\n\nexport function not(predicate) {\n  return function (a) {\n    return !predicate(a);\n  };\n}\n/**\n * Use `Endomorphism` module instead.\n *\n * @category instances\n * @since 2.10.0\n * @deprecated\n */\n\nexport var getEndomorphismMonoid = function getEndomorphismMonoid() {\n  return {\n    concat: function concat(first, second) {\n      return flow(first, second);\n    },\n    empty: identity\n  };\n};","var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n}; // -------------------------------------------------------------------------------------\n// Option\n// -------------------------------------------------------------------------------------\n\n/** @internal */\n\n\nexport var isNone = function isNone(fa) {\n  return fa._tag === 'None';\n};\n/** @internal */\n\nexport var isSome = function isSome(fa) {\n  return fa._tag === 'Some';\n};\n/** @internal */\n\nexport var none = {\n  _tag: 'None'\n};\n/** @internal */\n\nexport var some = function some(a) {\n  return {\n    _tag: 'Some',\n    value: a\n  };\n}; // -------------------------------------------------------------------------------------\n// Either\n// -------------------------------------------------------------------------------------\n\n/** @internal */\n\nexport var isLeft = function isLeft(ma) {\n  return ma._tag === 'Left';\n};\n/** @internal */\n\nexport var isRight = function isRight(ma) {\n  return ma._tag === 'Right';\n};\n/** @internal */\n\nexport var left = function left(e) {\n  return {\n    _tag: 'Left',\n    left: e\n  };\n};\n/** @internal */\n\nexport var right = function right(a) {\n  return {\n    _tag: 'Right',\n    right: a\n  };\n}; // -------------------------------------------------------------------------------------\n// ReadonlyNonEmptyArray\n// -------------------------------------------------------------------------------------\n\n/** @internal */\n\nexport var singleton = function singleton(a) {\n  return [a];\n};\n/** @internal */\n\nexport var isNonEmpty = function isNonEmpty(as) {\n  return as.length > 0;\n};\n/** @internal */\n\nexport var head = function head(as) {\n  return as[0];\n};\n/** @internal */\n\nexport var tail = function tail(as) {\n  return as.slice(1);\n}; // -------------------------------------------------------------------------------------\n// empty\n// -------------------------------------------------------------------------------------\n\n/** @internal */\n\nexport var emptyReadonlyArray = [];\n/** @internal */\n\nexport var emptyRecord = {}; // -------------------------------------------------------------------------------------\n// Record\n// -------------------------------------------------------------------------------------\n\n/** @internal */\n\nexport var has = Object.prototype.hasOwnProperty; // -------------------------------------------------------------------------------------\n// NonEmptyArray\n// -------------------------------------------------------------------------------------\n\n/** @internal */\n\nexport var fromReadonlyNonEmptyArray = function fromReadonlyNonEmptyArray(as) {\n  return __spreadArray([as[0]], as.slice(1));\n};","var $ = require('../internals/export');\nvar global = require('../internals/global');\n\n// `globalThis` object\n// https://tc39.es/ecma262/#sec-globalthis\n$({ global: true }, {\n  globalThis: global\n});\n","// TODO: Remove from `core-js@4`\nrequire('../modules/es.global-this');\n","export const height = 300;\nexport const weight = 300;\nexport const roughness = 0.5;\n","import * as React from \"react\";\nimport { useEffect } from \"react\";\n\nimport {\n  BufferGeometry,\n  PerspectiveCamera,\n  Points,\n  PointsMaterial,\n  Scene,\n  Vector2,\n  Vector3,\n  WebGLRenderer,\n} from \"three\";\nimport * as consts from \"../consts\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { range } from \"fp-ts/NonEmptyArray\";\nimport { makeIndicator } from \"../util\";\n\nconst PointsViewer = (props: {\n  buffer: () => Float32Array;\n  itemSize: number;\n  uniqueId: string;\n}) => {\n  const uniqueId = \"pointsviewer\" + props.uniqueId;\n  useEffect(() => {\n    const scene = new Scene();\n    const camera = new PerspectiveCamera(\n      75,\n      consts.weight / consts.height,\n      0.1,\n      1000\n    );\n    const renderer = new WebGLRenderer();\n    renderer.setSize(consts.weight, consts.height);\n    document.getElementById(uniqueId).appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.addEventListener(\"change\", () => renderer.render(scene, camera));\n    const geometry = new BufferGeometry();\n    const arr = props.buffer();\n    const itemSize = props.itemSize;\n    const pointsMaker = () => {\n      if (itemSize === 2)\n        return range(0, arr.length / itemSize - 1).map(\n          (i) => new Vector2(arr[i * itemSize], arr[i * itemSize + 1])\n        );\n      else if (itemSize === 3)\n        return range(0, arr.length / itemSize - 1).map(\n          (i) =>\n            new Vector3(\n              arr[i * itemSize],\n              arr[i * itemSize + 1],\n              arr[i * itemSize + 2]\n            )\n        );\n      else throw new Error(\"unsupported item size: \" + itemSize.toString());\n    };\n    geometry.setFromPoints(pointsMaker());\n    // geometry.setAttribute(\"position\", new Float32BufferAttribute(arr, 4));\n    const material = new PointsMaterial({ color: 0xffff00, size: 0.04 });\n    const points = new Points(geometry, material);\n    scene.add(points);\n    scene.add(makeIndicator());\n    camera.position.z = 2.5;\n    requestAnimationFrame(() => renderer.render(scene, camera));\n  }, []);\n\n  return (\n    <div\n      id={uniqueId}\n      style={{\n        height: consts.height.toString() + \"px\",\n        width: consts.weight.toString() + \"px\",\n      }}\n    />\n  );\n};\nexport default PointsViewer;\n","import { ArrowHelper, Object3D, Vector3 } from \"three\";\n\nimport { zip } from \"fp-ts/Array\";\nimport * as wasm from \"irradiance-wasm\";\nimport * as wasm_bg from \"irradiance-wasm/irradiance_wasm_bg.wasm\";\n\nexport function downloadURL(data, fileName) {\n  const a = document.createElement(\"a\");\n  a.href = data;\n  a.download = fileName;\n  document.body.appendChild(a);\n  a.style.display = \"none\";\n  a.click();\n  a.remove();\n}\n\nexport function downloadBlob(\n  data: Uint8Array,\n  fileName: string,\n  mimeType: string = \"application/octet-stream\"\n) {\n  const blob = new Blob([data], {\n    type: mimeType,\n  });\n\n  const url = window.URL.createObjectURL(blob);\n\n  downloadURL(url, fileName);\n\n  setTimeout(() => window.URL.revokeObjectURL(url), 1000);\n}\n\nexport function makeIndicator() {\n  const xyz = [\n    new Vector3(1, 0, 0),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 0, 1),\n  ];\n  const colors = [0xff0000, 0x00ff00, 0x0000ff];\n  const origin = new Vector3(0, 0, 0);\n  const length = 1;\n\n  const arrows = zip(xyz, colors).map(\n    ([dir, hex]) => new ArrowHelper(dir, origin, length, hex)\n  );\n  const group = new Object3D();\n  group.add(...arrows);\n\n  return group;\n}\n\n//\n\nexport function generateDiffuseIrradianceMap(\n  image: Uint8Array,\n  sampleSize: number,\n  blurSigma: number\n) {\n  let buffers: Uint8Array[] = [];\n  wasm.irradiance(\n    sampleSize,\n    64,\n    image,\n    blurSigma,\n    (idx: bigint, offset: number, size: bigint) => {\n      const hdrBuf = new Uint8Array(\n        wasm_bg.memory.buffer,\n        offset,\n        Number(size)\n      );\n      const cp = new Uint8Array(new ArrayBuffer(Number(size)));\n      cp.set(hdrBuf);\n      buffers.push(cp);\n    }\n  );\n  return buffers;\n}\n\nexport async function generatePreFilteredSpecularMap(\n  image: Uint8Array,\n  sampleCount: number,\n  mapSize: number,\n  mipLevels: number\n) {\n  let buffers: Uint8Array[] = [];\n\n  wasm.specular(\n    sampleCount,\n    mapSize,\n    image,\n    (idx: bigint, offset: number, size: bigint) => {\n      const hdrBuf = new Uint8Array(\n        wasm_bg.memory.buffer,\n        offset,\n        Number(size)\n      );\n      const cp = new Uint8Array(new ArrayBuffer(Number(size)));\n      cp.set(hdrBuf);\n      buffers.push(cp);\n    },\n    mipLevels\n  );\n  return buffers;\n}\n\nexport function webGpuTest() {\n  fetch(\"/shader.wgsl\")\n    .then((x) => x.text())\n    .then((shaderCode) => wasm.wasmtest(shaderCode));\n}\n\nexport function tup<A, B>(a: A, b: B): [A, B] {\n  return [a, b];\n}\n\nexport function downloadBlurredHDR(image: Uint8Array, sigma: number) {\n  downloadBlob(wasm.debug_blur(image, sigma), \"blurred.hdr\");\n}\n","import * as wasm from './irradiance_wasm_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_22(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h7d5b26e5ee44047b(arg0, arg1, addHeapObject(arg2));\n}\n\n/**\n*/\nexport function greet() {\n    wasm.greet();\n}\n\n/**\n* @param {number} sample_size\n* @returns {Float32Array}\n*/\nexport function fibonacci_hemi_sphere(sample_size) {\n    const ret = wasm.fibonacci_hemi_sphere(sample_size);\n    return takeObject(ret);\n}\n\n/**\n* @param {number} sample_size\n* @returns {Float32Array}\n*/\nexport function hammersleys(sample_size) {\n    const ret = wasm.hammersleys(sample_size);\n    return takeObject(ret);\n}\n\n/**\n* @param {number} nx\n* @param {number} ny\n* @param {number} nz\n* @param {number} roughness\n* @param {number} sample_size\n* @returns {Float32Array}\n*/\nexport function ggxs(nx, ny, nz, roughness, sample_size) {\n    const ret = wasm.ggxs(nx, ny, nz, roughness, sample_size);\n    return takeObject(ret);\n}\n\n/**\n* @param {number} nx\n* @param {number} ny\n* @param {number} nz\n* @param {number} roughness\n* @param {number} sample_size\n* @returns {Float32Array}\n*/\nexport function the_step(nx, ny, nz, roughness, sample_size) {\n    const ret = wasm.the_step(nx, ny, nz, roughness, sample_size);\n    return takeObject(ret);\n}\n\n/**\n* @param {number} nx\n* @param {number} ny\n* @param {number} nz\n* @param {number} roughness\n* @param {number} sample_size\n* @returns {Float32Array}\n*/\nexport function the_step_2(nx, ny, nz, roughness, sample_size) {\n    const ret = wasm.the_step_2(nx, ny, nz, roughness, sample_size);\n    return takeObject(ret);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {Uint8Array} env_map_buffer\n* @param {number} blur_sigma\n* @returns {Uint8Array}\n*/\nexport function debug_blur(env_map_buffer, blur_sigma) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(env_map_buffer, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.debug_blur(retptr, ptr0, len0, blur_sigma);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n/**\n* @param {number} sample_size\n* @param {number} map_size\n* @param {Uint8Array} env_map_buffer\n* @param {number} blur_sigma\n* @param {Function} callback\n*/\nexport function irradiance(sample_size, map_size, env_map_buffer, blur_sigma, callback) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(env_map_buffer, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.irradiance(retptr, sample_size, map_size, ptr0, len0, blur_sigma, addBorrowedObject(callback));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {number} sample_size\n* @param {number} map_size\n* @param {Uint8Array} env_map_buffer\n* @param {Function} callback\n* @param {number} mip_levels\n*/\nexport function specular(sample_size, map_size, env_map_buffer, callback, mip_levels) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(env_map_buffer, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.specular(retptr, sample_size, map_size, ptr0, len0, addBorrowedObject(callback), mip_levels);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* @param {string} shader_code\n* @returns {Promise<void>}\n*/\nexport function wasmtest(shader_code) {\n    const ptr0 = passStringToWasm0(shader_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.wasmtest(ptr0, len0);\n    return takeObject(ret);\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_111(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__hcd7bb838f18a8270(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\nexport function __wbg_log_bbf12d9e18dd4cea(arg0, arg1) {\n    console.log(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbg_alert_2fab8444cb9f65ae(arg0, arg1) {\n    alert(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_bigint_new(arg0, arg1) {\n    const ret = BigInt(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_693216e109162396() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_0ddaca5d1abfb52f(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_error_09919627ac0992f5(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport function __wbindgen_object_clone_ref(arg0) {\n    const ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = takeObject(arg0).original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbg_instanceof_Window_0e6c0f1096d66c3c(arg0) {\n    const ret = getObject(arg0) instanceof Window;\n    return ret;\n};\n\nexport function __wbg_navigator_1f72d7edb7b4c387(arg0) {\n    const ret = getObject(arg0).navigator;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_gpu_cef91ba7f6ed8448(arg0) {\n    const ret = getObject(arg0).gpu;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_requestAdapter_e9416c22f0cd75f7(arg0, arg1) {\n    const ret = getObject(arg0).requestAdapter(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_instanceof_GpuAdapter_9057e2c37604b393(arg0) {\n    const ret = getObject(arg0) instanceof GPUAdapter;\n    return ret;\n};\n\nexport function __wbg_requestDevice_7a66683af89c7f2e(arg0, arg1) {\n    const ret = getObject(arg0).requestDevice(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_submit_5cad0e7503d36284(arg0, arg1) {\n    getObject(arg0).submit(getObject(arg1));\n};\n\nexport function __wbg_queue_d03f1ba96edd3b1f(arg0) {\n    const ret = getObject(arg0).queue;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_createBindGroup_c0dc1a4ae52704c2(arg0, arg1) {\n    const ret = getObject(arg0).createBindGroup(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_createBuffer_cb211dfbe913d820(arg0, arg1) {\n    const ret = getObject(arg0).createBuffer(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_createCommandEncoder_8b5cea7a8739e491(arg0, arg1) {\n    const ret = getObject(arg0).createCommandEncoder(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_createComputePipeline_d3abe62938cfb8b7(arg0, arg1) {\n    const ret = getObject(arg0).createComputePipeline(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_createShaderModule_95fe8ca8b3082e6a(arg0, arg1) {\n    const ret = getObject(arg0).createShaderModule(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_dispatch_b68689d8b6913579(arg0, arg1, arg2, arg3) {\n    getObject(arg0).dispatch(arg1 >>> 0, arg2 >>> 0, arg3 >>> 0);\n};\n\nexport function __wbg_endPass_1308f5c1be43be9d(arg0) {\n    getObject(arg0).endPass();\n};\n\nexport function __wbg_setPipeline_51785f01a08eb704(arg0, arg1) {\n    getObject(arg0).setPipeline(getObject(arg1));\n};\n\nexport function __wbg_setBindGroup_b1547aa3662df477(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {\n    getObject(arg0).setBindGroup(arg1 >>> 0, getObject(arg2), getArrayU32FromWasm0(arg3, arg4), arg5, arg6 >>> 0);\n};\n\nexport function __wbg_getMappedRange_bbcc7dfd4b923367(arg0, arg1, arg2) {\n    const ret = getObject(arg0).getMappedRange(arg1, arg2);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_mapAsync_fecdf281a93b3d3d(arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).mapAsync(arg1 >>> 0, arg2, arg3);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_unmap_89c17d27d3402fc2(arg0) {\n    getObject(arg0).unmap();\n};\n\nexport function __wbg_getBindGroupLayout_9369710b01b21cdd(arg0, arg1) {\n    const ret = getObject(arg0).getBindGroupLayout(arg1 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_now_20d2aadcf3cc17f7(arg0) {\n    const ret = getObject(arg0).now();\n    return ret;\n};\n\nexport function __wbg_label_42a0f37da87f53dc(arg0, arg1) {\n    const ret = getObject(arg1).label;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_beginComputePass_7ecaf4dbab67723d(arg0, arg1) {\n    const ret = getObject(arg0).beginComputePass(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_copyBufferToBuffer_aa908599dbdc95b6(arg0, arg1, arg2, arg3, arg4, arg5) {\n    getObject(arg0).copyBufferToBuffer(getObject(arg1), arg2, getObject(arg3), arg4, arg5);\n};\n\nexport function __wbg_finish_ff4fbe578408d18e(arg0) {\n    const ret = getObject(arg0).finish();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_finish_9034d09980c689e0(arg0, arg1) {\n    const ret = getObject(arg0).finish(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_94fb1279cf6afea5() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_newnoargs_e23b458e372830de(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_get_a9cab131e3152c49() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_call_ae78342adc33730a() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_new_36359baae5a47e27() {\n    const ret = new Object();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_push_40c6a90f1805aa90(arg0, arg1) {\n    const ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nexport function __wbg_call_3ed288a247f13ea5() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_call_6ed7121cfb42cfed() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2), getObject(arg3), getObject(arg4));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_new_37705eed627d5ed9(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_111(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return addHeapObject(ret);\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_resolve_a9a87bdd64e9e62c(arg0) {\n    const ret = Promise.resolve(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_then_ce526c837d07b68f(arg0, arg1) {\n    const ret = getObject(arg0).then(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_then_842e65b843962f56(arg0, arg1, arg2) {\n    const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_self_99737b4dcdf6f0d8() { return handleError(function () {\n    const ret = self.self;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_window_9b61fbbf3564c4fb() { return handleError(function () {\n    const ret = window.window;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_globalThis_8e275ef40caea3a3() { return handleError(function () {\n    const ret = globalThis.globalThis;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_global_5de1e0f82bddcd27() { return handleError(function () {\n    const ret = global.global;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nexport function __wbg_buffer_7af23f65f6c64548(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_newwithbyteoffsetandlength_ce1e75f0ce5f7974(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_cc9018bd6f283b6f(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_f25e869e4565d2a2(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport function __wbg_length_0acb1cf9bbaf8519(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_3f554978d8793b14(arg0, arg1, arg2) {\n    const ret = new Float32Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_540a7305f70a9894(arg0) {\n    const ret = new Float32Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_93b1c87ee2af852e() { return handleError(function (arg0, arg1, arg2) {\n    const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(getObject(arg1));\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_closure_wrapper404(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 86, __wbg_adapter_22);\n    return addHeapObject(ret);\n};\n\n"],"names":["of","filterMapWithIndex","f","fa","out","i","length","optionB","push","value","filterMap","_","a","as","bs","undefined","fb","fc","len","Math","min","b","fromEquals","_equals","equals","x","y","eqStrict","__spreadArray","to","from","il","j","isNonEmpty","isOutOfBound","prependW","head","tail","prepend","appendW","end","init","append","unsafeInsertAt","xs","fromReadonlyNonEmptyArray","splice","makeBy","n","max","floor","range","start","cons","snoc","equalsDefault","compare","first","second","fromCompare","_compare","O","concat","empty","reduce","reduceWithIndex","foldMap","S","slice","s","reduceRight","reduceRightWithIndex","foldMapWithIndex","extract","getShow","show","map","join","getEq","E","ys","every","identity","constant","constTrue","pipe","ab","bc","cd","de","ef","fg","gh","hi","arguments","ret","SK","isSome","_tag","none","some","isLeft","ma","singleton","emptyReadonlyArray","emptyRecord","Object","prototype","hasOwnProperty","$","global","globalThis","height","weight","roughness","props","uniqueId","useEffect","scene","Scene","camera","PerspectiveCamera","consts","renderer","WebGLRenderer","setSize","document","getElementById","appendChild","domElement","OrbitControls","addEventListener","render","geometry","BufferGeometry","arr","buffer","itemSize","setFromPoints","Vector2","Vector3","Error","toString","pointsMaker","material","PointsMaterial","color","size","points","Points","add","makeIndicator","position","z","requestAnimationFrame","id","style","width","downloadBlob","data","fileName","mimeType","blob","Blob","type","url","window","URL","createObjectURL","createElement","href","download","body","display","click","remove","downloadURL","setTimeout","revokeObjectURL","xyz","origin","arrows","zip","dir","hex","ArrowHelper","group","Object3D","generateDiffuseIrradianceMap","image","sampleSize","blurSigma","buffers","wasm","idx","offset","hdrBuf","Uint8Array","wasm_bg","Number","cp","ArrayBuffer","set","generatePreFilteredSpecularMap","sampleCount","mapSize","mipLevels","webGpuTest","fetch","then","text","shaderCode","downloadBlurredHDR","sigma","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","getStringFromWasm0","ptr","subarray","heap","Array","fill","heap_next","addHeapObject","obj","getObject","takeObject","dropObject","debugString","val","description","name","isArray","debug","className","builtInMatches","exec","call","JSON","stringify","message","stack","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","read","written","passStringToWasm0","malloc","realloc","mem","code","charCodeAt","cachegetInt32Memory0","getInt32Memory0","Int32Array","__wbg_adapter_22","arg0","arg1","arg2","fibonacci_hemi_sphere","sample_size","hammersleys","ggxs","nx","ny","nz","the_step","the_step_2","passArray8ToWasm0","debug_blur","env_map_buffer","blur_sigma","retptr","ptr0","len0","r0","r1","r2","v1","stack_pointer","addBorrowedObject","irradiance","map_size","callback","specular","mip_levels","wasmtest","shader_code","cachegetUint32Memory0","getArrayU32FromWasm0","Uint32Array","handleError","args","apply","this","e","__wbg_log_bbf12d9e18dd4cea","console","log","__wbindgen_string_new","__wbindgen_object_drop_ref","__wbg_alert_2fab8444cb9f65ae","alert","__wbindgen_number_new","__wbindgen_bigint_new","BigInt","__wbg_new_693216e109162396","__wbg_stack_0ddaca5d1abfb52f","__wbg_error_09919627ac0992f5","error","__wbindgen_object_clone_ref","__wbindgen_cb_drop","original","cnt","__wbg_instanceof_Window_0e6c0f1096d66c3c","Window","__wbg_navigator_1f72d7edb7b4c387","navigator","__wbg_gpu_cef91ba7f6ed8448","gpu","__wbg_requestAdapter_e9416c22f0cd75f7","requestAdapter","__wbg_instanceof_GpuAdapter_9057e2c37604b393","GPUAdapter","__wbg_requestDevice_7a66683af89c7f2e","requestDevice","__wbg_submit_5cad0e7503d36284","submit","__wbg_queue_d03f1ba96edd3b1f","queue","__wbg_createBindGroup_c0dc1a4ae52704c2","createBindGroup","__wbg_createBuffer_cb211dfbe913d820","createBuffer","__wbg_createCommandEncoder_8b5cea7a8739e491","createCommandEncoder","__wbg_createComputePipeline_d3abe62938cfb8b7","createComputePipeline","__wbg_createShaderModule_95fe8ca8b3082e6a","createShaderModule","__wbg_dispatch_b68689d8b6913579","arg3","dispatch","__wbg_endPass_1308f5c1be43be9d","endPass","__wbg_setPipeline_51785f01a08eb704","setPipeline","__wbg_setBindGroup_b1547aa3662df477","arg4","arg5","arg6","setBindGroup","__wbg_getMappedRange_bbcc7dfd4b923367","getMappedRange","__wbg_mapAsync_fecdf281a93b3d3d","mapAsync","__wbg_unmap_89c17d27d3402fc2","unmap","__wbg_getBindGroupLayout_9369710b01b21cdd","getBindGroupLayout","__wbg_now_20d2aadcf3cc17f7","now","__wbg_label_42a0f37da87f53dc","label","__wbg_beginComputePass_7ecaf4dbab67723d","beginComputePass","__wbg_copyBufferToBuffer_aa908599dbdc95b6","copyBufferToBuffer","__wbg_finish_ff4fbe578408d18e","finish","__wbg_finish_9034d09980c689e0","__wbg_new_94fb1279cf6afea5","__wbg_newnoargs_e23b458e372830de","Function","__wbg_get_a9cab131e3152c49","Reflect","get","__wbg_call_ae78342adc33730a","__wbg_new_36359baae5a47e27","__wbg_push_40c6a90f1805aa90","__wbg_call_3ed288a247f13ea5","__wbg_call_6ed7121cfb42cfed","__wbg_new_37705eed627d5ed9","state0","Promise","__wbg_adapter_111","__wbg_resolve_a9a87bdd64e9e62c","resolve","__wbg_then_ce526c837d07b68f","__wbg_then_842e65b843962f56","__wbg_self_99737b4dcdf6f0d8","self","__wbg_window_9b61fbbf3564c4fb","__wbg_globalThis_8e275ef40caea3a3","__wbg_global_5de1e0f82bddcd27","__wbindgen_is_undefined","__wbg_buffer_7af23f65f6c64548","__wbg_newwithbyteoffsetandlength_ce1e75f0ce5f7974","__wbg_new_cc9018bd6f283b6f","__wbg_set_f25e869e4565d2a2","__wbg_length_0acb1cf9bbaf8519","__wbg_newwithbyteoffsetandlength_3f554978d8793b14","Float32Array","__wbg_new_540a7305f70a9894","__wbg_set_93b1c87ee2af852e","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_memory","__wbindgen_closure_wrapper404","dtor","state","real","makeMutClosure"],"sourceRoot":""}